<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://feng-zhang0712.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://feng-zhang0712.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-14T05:51:24+00:00</updated><id>https://feng-zhang0712.github.io//feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">计算机网络 - 运输层</title><link href="https://feng-zhang0712.github.io//blog/2024/transport-layer/" rel="alternate" type="text/html" title="计算机网络 - 运输层"/><published>2024-09-14T00:00:00+00:00</published><updated>2024-09-14T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/transport-layer</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/transport-layer/"><![CDATA[]]></content><author><name></name></author><category term="computer"/><category term="computer"/><category term="networks"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">计算机网络 - 网络层</title><link href="https://feng-zhang0712.github.io//blog/2024/network-layer/" rel="alternate" type="text/html" title="计算机网络 - 网络层"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/network-layer</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/network-layer/"><![CDATA[]]></content><author><name></name></author><category term="computer"/><category term="computer"/><category term="networks"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">CSS Modules 用法教程</title><link href="https://feng-zhang0712.github.io//blog/2024/css-modules/" rel="alternate" type="text/html" title="CSS Modules 用法教程"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/css-modules</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/css-modules/"><![CDATA[<p><a href="https://www.ruanyifeng.com/blog/2016/06/css_modules.html">CSS Modules 用法教程</a></p>]]></content><author><name></name></author><category term="frontend"/><category term="css"/><category term="css modules"/><summary type="html"><![CDATA[CSS Modules 用法教程]]></summary></entry><entry><title type="html">CSS 预处理器</title><link href="https://feng-zhang0712.github.io//blog/2024/css-preprocessor/" rel="alternate" type="text/html" title="CSS 预处理器"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/css-preprocessor</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/css-preprocessor/"><![CDATA[<h2 id="一概念">一、概念</h2> <p>CSS 预处理器是一种脚本语言，扩展了原生 CSS 的功能。通过预处理器，可以使用更高级的语法和特性来编写样式代码。预处理器文件（如 .sass）在编译过程中会被转换成标准的 CSS 文件。</p> <h2 id="二常见的-css-预处理器">二、常见的 CSS 预处理器</h2> <p>Sass：提供了两种语法，Sass（缩进语法）和 SCSS（类似 CSS 的语法）。Sass 是目前最流行的预处理器之一。 LESS：另一个流行的预处理器，语法上与 CSS 更接近，容易上手。</p> <h2 id="三预处理器的用途和优点">三、预处理器的用途和优点</h2> <h3 id="31-变量">3.1 变量</h3> <p>预处理器支持变量，可以用来存储重复使用的值（如颜色）等。</p> <h3 id="32-嵌套">3.2 嵌套</h3> <p>预处理器允许嵌套 CSS，可以更清晰地表示层次结构。</p> <h3 id="33-混合宏mixin">3.3. 混合宏（Mixin）</h3> <p>混合宏允许定义一组可重用的样式规则，类似于函数。可以通过传递参数自定义样式。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@mixin</span> <span class="n">border-radius</span><span class="p">(</span><span class="err">$</span><span class="n">radius</span><span class="p">)</span> <span class="p">{</span>
  <span class="nl">-webkit-border-radius</span><span class="p">:</span> <span class="err">$</span><span class="n">radius</span><span class="p">;</span>
     <span class="nl">-moz-border-radius</span><span class="p">:</span> <span class="err">$</span><span class="n">radius</span><span class="p">;</span>
          <span class="nl">border-radius</span><span class="p">:</span> <span class="err">$</span><span class="n">radius</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.button</span> <span class="p">{</span>
  <span class="err">@include</span> <span class="err">border-radius(10px);</span>
<span class="p">}</span>

</code></pre></div></div> <h3 id="34-继承">3.4 继承</h3> <p>预处理器支持继承样式，一个选择器可以继承另一个选择器的样式。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="nt">button-styles</span> <span class="p">{</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">10px</span> <span class="m">20px</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.button</span> <span class="p">{</span>
  <span class="err">@extend</span> <span class="err">%button-styles;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#3498db</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.button-secondary</span> <span class="p">{</span>
  <span class="err">@extend</span> <span class="err">%button-styles;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#2ecc71</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="35-函数">3.5 函数</h3> <p>预处理器允许定义函数，进行复杂的计算和逻辑操作，然后返回值，供样式规则使用。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@function</span> <span class="n">calculate-margin</span><span class="p">(</span><span class="err">$</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">@return</span> <span class="err">$</span><span class="n">value</span> <span class="err">*</span> <span class="m">1.5</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="n">calculate-margin</span><span class="p">(</span><span class="m">10px</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="36-导入和拆分文件">3.6 导入和拆分文件</h3> <p>预处理器支持将样式拆分成多个文件，并使用 @import 语句导入。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* _variables.scss */</span>
<span class="err">$</span><span class="nt">primary-color</span><span class="o">:</span> <span class="err">#3498</span><span class="nt">db</span><span class="o">;</span>
<span class="err">$</span><span class="nt">secondary-color</span><span class="o">:</span> <span class="err">#2</span><span class="nt">ecc71</span><span class="o">;</span>

<span class="c">/* _mixins.scss */</span>
<span class="k">@mixin</span> <span class="n">flex-center</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* styles.scss */</span>
<span class="k">@import</span> <span class="s2">'variables'</span><span class="p">;</span>
<span class="k">@import</span> <span class="s2">'mixins'</span><span class="p">;</span>
<span class="nc">.header</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="err">$</span><span class="n">primary-color</span><span class="p">;</span>
  <span class="err">@include</span> <span class="err">flex-center;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100vh</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="37-条件语句和循环">3.7 条件语句和循环</h3> <p>预处理器支持条件语句和循环。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span><span class="nt">themes</span><span class="o">:</span> <span class="o">(</span><span class="s2">'light'</span><span class="o">,</span> <span class="s2">'dark'</span><span class="o">);</span>
<span class="k">@each</span> <span class="err">$</span><span class="n">theme</span> <span class="n">in</span> <span class="err">$</span><span class="n">themes</span> <span class="p">{</span>
  <span class="nc">.theme-</span><span class="err">#</span><span class="p">{</span><span class="err">$theme</span><span class="p">}</span> <span class="p">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="n">if</span><span class="p">(</span><span class="err">$</span><span class="n">theme</span> <span class="err">==</span> <span class="s2">'light'</span><span class="p">,</span> <span class="m">#fff</span><span class="p">,</span> <span class="m">#333</span><span class="p">);</span>
    <span class="nl">color</span><span class="p">:</span> <span class="n">if</span><span class="p">(</span><span class="err">$</span><span class="n">theme</span> <span class="err">==</span> <span class="s2">'light'</span><span class="p">,</span> <span class="m">#333</span><span class="p">,</span> <span class="m">#fff</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="frontend"/><category term="css"/><category term="sass"/><summary type="html"><![CDATA[一、概念]]></summary></entry><entry><title type="html">React 中的事件</title><link href="https://feng-zhang0712.github.io//blog/2024/events-in-react/" rel="alternate" type="text/html" title="React 中的事件"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/events-in-react</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/events-in-react/"><![CDATA[<p>React 的事件代理机制（Event Delegation）是其性能优化的一种手段。通过事件代理，React 将所有的事件监听器统一绑定到根元素，而不是每个具体的 DOM 元素上。这种方法减少了实际绑定到 DOM 元素上的事件处理器数量，从而提升了性能，特别是在有大量动态生成的元素时。</p> <h3 id="事件代理的工作原理">事件代理的工作原理</h3> <ol> <li><strong>统一绑定事件处理器</strong>：React 会在组件挂载时，将所有事件处理器统一绑定到应用的根元素（例如 <code class="language-plaintext highlighter-rouge">document</code> 或 <code class="language-plaintext highlighter-rouge">root</code> DOM 节点）。</li> <li><strong>事件捕获和冒泡</strong>：当用户在具体的 DOM 元素上触发事件时，事件会按照捕获和冒泡的机制传播。React 利用这个机制，在事件冒泡到根元素时捕获事件。</li> <li><strong>事件分发</strong>：在根元素上捕获到事件后，React 解析事件的目标元素，并根据目标元素和事件类型，找到对应的 React 组件实例和事件处理器，然后调用该处理器。</li> </ol> <h3 id="优点">优点</h3> <ul> <li><strong>性能优化</strong>：减少了实际绑定在 DOM 元素上的事件处理器数量，降低了内存消耗和性能开销。</li> <li><strong>简化事件管理</strong>：通过统一的事件处理机制，简化了事件添加和移除的管理。</li> </ul> <h3 id="示例">示例</h3> <p>以下是一个简单的示例，展示了事件代理的基本概念：</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">ButtonList</span> <span class="kd">extends</span> <span class="nc">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 获取被点击的按钮元素</span>
    <span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Button </span><span class="p">${</span><span class="nx">button</span><span class="p">.</span><span class="nx">textContent</span><span class="p">}</span><span class="s2"> clicked!`</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="nf">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>Button 1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>Button 2<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>Button 3<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ButtonList</span><span class="p">;</span>
</code></pre></div></div> <p>在这个示例中，三个按钮的点击事件都通过 <code class="language-plaintext highlighter-rouge">div</code> 容器上的 <code class="language-plaintext highlighter-rouge">onClick</code> 处理器进行处理。点击任意按钮时，事件会冒泡到 <code class="language-plaintext highlighter-rouge">div</code> 容器，被捕获并处理。</p> <h3 id="深入理解">深入理解</h3> <ul> <li><strong>合成事件</strong>：React 使用合成事件（Synthetic Events）对象来封装浏览器的原生事件对象。合成事件对象提供了与原生事件对象相同的接口，但具备跨浏览器的兼容性。</li> <li><strong>事件池</strong>：React 维护一个事件池，用于存储和复用合成事件对象。事件处理器执行后，合成事件对象会被复用以提高性能。因此，在事件处理器中，不能异步访问合成事件对象；如果需要异步访问，可以调用 <code class="language-plaintext highlighter-rouge">event.persist()</code> 方法防止对象被复用。</li> </ul> <h3 id="注意事项">注意事项</h3> <ul> <li><strong>异步访问事件对象</strong>：在异步函数中访问合成事件对象时，需要调用 <code class="language-plaintext highlighter-rouge">event.persist()</code> 方法。例如：</li> </ul> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">handleClick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nf">persist</span><span class="p">();</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span> <span class="c1">// 异步访问事件对象</span>
  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div> <ul> <li><strong>非冒泡事件</strong>：某些事件不会冒泡，例如 <code class="language-plaintext highlighter-rouge">onBlur</code> 和 <code class="language-plaintext highlighter-rouge">onFocus</code>。React 通过特殊处理，将这些事件也通过事件代理机制进行处理。</li> </ul> <h3 id="总结">总结</h3> <p>React 的事件代理机制通过在根元素上统一绑定事件处理器，有效地减少了实际绑定在 DOM 元素上的事件处理器数量，提升了性能，并简化了事件管理。这是 React 提升性能和简化事件管理的一种重要手段。</p>]]></content><author><name></name></author><category term="frontend"/><category term="react"/><category term="events"/><summary type="html"><![CDATA[React 的事件代理机制（Event Delegation）是其性能优化的一种手段。通过事件代理，React 将所有的事件监听器统一绑定到根元素，而不是每个具体的 DOM 元素上。这种方法减少了实际绑定到 DOM 元素上的事件处理器数量，从而提升了性能，特别是在有大量动态生成的元素时。]]></summary></entry><entry><title type="html">ES6 - Array</title><link href="https://feng-zhang0712.github.io//blog/2024/array/" rel="alternate" type="text/html" title="ES6 - Array"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/array</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/array/"><![CDATA[]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">ES6 - async 函数</title><link href="https://feng-zhang0712.github.io//blog/2024/async/" rel="alternate" type="text/html" title="ES6 - async 函数"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/async</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/async/"><![CDATA[<h2 id="一含义">一、含义</h2> <p>ES2017 标准引入了 <code class="language-plaintext highlighter-rouge">async</code> 函数，它是 Generator 函数的语法糖。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">readFile</span> <span class="o">=</span> <span class="nf">function </span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nf">readFile</span><span class="p">(</span><span class="nx">fileName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="nf">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="nf">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">gen</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">f1</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/fstab</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">f2</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/shells</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f1</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f2</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
<span class="p">};</span>

<span class="c1">// 上面代码的函数 gen 可以写成 async 函数，就是下面这样。</span>
<span class="kd">const</span> <span class="nx">asyncReadFile</span> <span class="o">=</span> <span class="k">async</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">f1</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/fstab</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">f2</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/shells</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f1</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f2</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
<span class="p">};</span>
</code></pre></div></div> <p>比较发现，<code class="language-plaintext highlighter-rouge">async</code> 函数就是将 Generator 函数的星号（*）替换成 <code class="language-plaintext highlighter-rouge">async</code>，将 <code class="language-plaintext highlighter-rouge">yield</code> 替换成 <code class="language-plaintext highlighter-rouge">await</code>，仅此而已。<code class="language-plaintext highlighter-rouge">async</code> 函数对 Generator 函数的改进，体现在以下四点。</p> <p>（1）<strong>内置执行器</strong></p> <p>Generator 函数的执行必须靠执行器，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一样。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">asyncReadFile</span><span class="p">();</span>
</code></pre></div></div> <p>上面的代码调用了 asyncReadFile 函数，然后它就会自动执行。这不像 Generator 函数，需要调用 next 方法才能真正执行，得到最后结果。</p> <p>（2）<strong>更好的语义</strong></p> <p><code class="language-plaintext highlighter-rouge">async</code> 和 <code class="language-plaintext highlighter-rouge">await</code>，比起星号（<code class="language-plaintext highlighter-rouge">*</code>）和 <code class="language-plaintext highlighter-rouge">yield</code>，语义更清楚。<code class="language-plaintext highlighter-rouge">async</code> 表示函数里有异步操作，<code class="language-plaintext highlighter-rouge">await</code> 表示紧跟在后面的表达式需要等待结果。</p> <p>（3）<strong>更广的适用性</strong></p> <p>co 模块约定，<code class="language-plaintext highlighter-rouge">yield</code> 命令后面只能是 Thunk 函数或 Promise 对象，而 <code class="language-plaintext highlighter-rouge">async</code> 函数的 <code class="language-plaintext highlighter-rouge">await</code> 命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 <code class="language-plaintext highlighter-rouge">resolved</code> 的 Promise 对象）。</p> <p>（4）<strong>返回值是 Promise</strong></p> <p><code class="language-plaintext highlighter-rouge">async</code> 函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象更方便。</p> <h2 id="二语法">二、语法</h2> <h3 id="21-返回-promise-对象">2.1 返回 Promise 对象</h3> <p><code class="language-plaintext highlighter-rouge">async</code> 函数返回一个 Promise 对象。</p> <p><code class="language-plaintext highlighter-rouge">async</code> 函数内部 <code class="language-plaintext highlighter-rouge">return</code> 语句返回的值，会成为 <code class="language-plaintext highlighter-rouge">then</code> 方法回调函数的参数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">'</span><span class="s1">hello world</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">f</span><span class="p">().</span><span class="nf">then</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
<span class="c1">// "hello world"</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">async</code> 函数内部抛出错误，会导致返回的 Promise 对象变为 <code class="language-plaintext highlighter-rouge">reject</code> 状态。抛出的错误对象会被 <code class="language-plaintext highlighter-rouge">catch</code> 方法回调函数接收到。</p> <h3 id="22-promise-对象的状态变化">2.2 Promise 对象的状态变化</h3> <p>只有 <code class="language-plaintext highlighter-rouge">async</code> 函数内部的异步操作执行完，才会执行 <code class="language-plaintext highlighter-rouge">then</code> 方法指定的回调函数。</p> <h3 id="23-await-命令">2.3 await 命令</h3> <p>正常情况下，<code class="language-plaintext highlighter-rouge">await</code> 命令后面是一个 Promise 对象，返回该对象的结果。</p> <p>（1）如果 <code class="language-plaintext highlighter-rouge">await</code> 后面不是 Promise 对象，就直接返回对应的值。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// 等同于</span>
  <span class="c1">// return 123;</span>
  <span class="k">return</span> <span class="k">await</span> <span class="mi">123</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">f</span><span class="p">().</span><span class="nf">then</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span> <span class="c1">// 123</span>
</code></pre></div></div> <p>（2）如果 <code class="language-plaintext highlighter-rouge">await</code> 命令后面是一个 <code class="language-plaintext highlighter-rouge">thenable</code> 对象（即定义了 <code class="language-plaintext highlighter-rouge">then</code> 方法的对象），那么 <code class="language-plaintext highlighter-rouge">await</code> 会将其等同于 Promise 对象。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Sleep</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">timeout</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">timeout</span> <span class="o">=</span> <span class="nx">timeout</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nf">then</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">startTime</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
    <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">-</span> <span class="nx">startTime</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="nx">timeout</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">sleepTime</span> <span class="o">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nc">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">sleepTime</span><span class="p">);</span>
<span class="p">})();</span>
<span class="c1">// 1000</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">await</code> 命令后面是一个 Sleep 对象的实例。这个实例不是 Promise 对象，但是因为定义了 <code class="language-plaintext highlighter-rouge">then</code> 方法，<code class="language-plaintext highlighter-rouge">await</code> 会将其视为 Promise 处理。</p> <p>（3）借助 <code class="language-plaintext highlighter-rouge">await</code> 命令可以实现休眠功能。下面给出了一个简化的 sleep 实现。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">sleep</span><span class="p">(</span><span class="nx">interval</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">interval</span><span class="p">);</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="c1">// 用法</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">one2FiveInAsync</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
    <span class="k">await</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nf">one2FiveInAsync</span><span class="p">();</span>
</code></pre></div></div> <p>（4）当函数执行到 <code class="language-plaintext highlighter-rouge">await</code> 时，被等待的表达式会立即执行，所有依赖该表达式的值的代码会被暂停，并推送进微任务队列（microtask queue）。然后主线程被释放出来，用于事件循环中的下一个任务。即使等待的值是已经敲定的 promise 或不是 promise，也会发生这种情况。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">foo</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">);</span>
  <span class="k">await</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="dl">"</span><span class="s2">middle</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="dl">"</span><span class="s2">end</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">foo</span><span class="p">(</span><span class="dl">"</span><span class="s2">First</span><span class="dl">"</span><span class="p">);</span>
<span class="nf">foo</span><span class="p">(</span><span class="dl">"</span><span class="s2">Second</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// First start</span>
<span class="c1">// First middle</span>
<span class="c1">// Second start</span>
<span class="c1">// Second middle</span>
<span class="c1">// First end</span>
<span class="c1">// Second end</span>
</code></pre></div></div> <p>上面的代码，执行到 <code class="language-plaintext highlighter-rouge">await</code> 时，后面的代码会整体被安排进一个新的微任务，此后的函数体变为异步执行。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="nf">queueMicrotask</span><span class="p">(</span><span class="kd">function</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">microtask</span><span class="dl">"</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">queueMicrotask</span><span class="p">(</span><span class="nx">test</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">async function start</span><span class="dl">"</span><span class="p">);</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">await</span> <span class="kc">null</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">async function resume</span><span class="dl">"</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">await</span> <span class="kc">null</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">async function end</span><span class="dl">"</span><span class="p">);</span>
<span class="p">})();</span>

<span class="nf">queueMicrotask</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">queueMicrotask() after calling async function</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">script sync part end</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// async function start</span>
<span class="c1">// script sync part end</span>
<span class="c1">// microtask 1</span>
<span class="c1">// async function resume 1</span>
<span class="c1">// queueMicrotask() after calling async function</span>
<span class="c1">// microtask 2</span>
<span class="c1">// async function resume 2</span>
<span class="c1">// microtask 3</span>
<span class="c1">// async function end</span>
</code></pre></div></div> <p>上面的代码，<code class="language-plaintext highlighter-rouge">test</code> 方法总会在异步函数恢复执行前被调用，呈现轮流的调度。微任务被执行的顺序通常就是入队的先后顺序，而 <code class="language-plaintext highlighter-rouge">console.log("queueMicrotask() after calling async function");</code> 比 <code class="language-plaintext highlighter-rouge">await</code> 晚入队，因此 <code class="language-plaintext highlighter-rouge">"queueMicrotask() after calling async function"</code> 在异步函数第一次恢复之后才输出。</p> <h3 id="24-使用注意点">2.4 使用注意点</h3> <ul> <li><code class="language-plaintext highlighter-rouge">await</code> 命令只能用在 <code class="language-plaintext highlighter-rouge">async</code> 函数之中，如果用在普通函数，就会报错。</li> <li><code class="language-plaintext highlighter-rouge">for</code> 循环和数组的 <code class="language-plaintext highlighter-rouge">reduce</code> 方法支持 <code class="language-plaintext highlighter-rouge">async</code> 函数。</li> <li><code class="language-plaintext highlighter-rouge">async</code> 函数可以保留运行堆栈。</li> </ul> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">b</span><span class="p">().</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">c</span><span class="p">());</span>
<span class="p">};</span>
</code></pre></div></div> <p>上面代码中，函数 <code class="language-plaintext highlighter-rouge">a</code> 内部运行了一个异步任务 <code class="language-plaintext highlighter-rouge">b</code>。当 <code class="language-plaintext highlighter-rouge">b</code> 运行的时候，函数 <code class="language-plaintext highlighter-rouge">a</code> 不会中断，而是继续执行。等到 <code class="language-plaintext highlighter-rouge">b</code> 运行结束，可能 <code class="language-plaintext highlighter-rouge">a</code> 早就运行结束了，<code class="language-plaintext highlighter-rouge">b</code> 所在的上下文环境已经消失了。如果 <code class="language-plaintext highlighter-rouge">b</code> 或 <code class="language-plaintext highlighter-rouge">c</code> 报错，错误堆栈将不包括 <code class="language-plaintext highlighter-rouge">a</code>。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nf">b</span><span class="p">();</span>
  <span class="nf">c</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">b</code> 运行的时候，<code class="language-plaintext highlighter-rouge">a</code> 是暂停执行，上下文环境都保存着。一旦 <code class="language-plaintext highlighter-rouge">b</code> 或 <code class="language-plaintext highlighter-rouge">c</code> 报错，错误堆栈将包括 <code class="language-plaintext highlighter-rouge">a</code>。</p> <h2 id="三async-函数的实现原理">三、async 函数的实现原理</h2> <p><code class="language-plaintext highlighter-rouge">async</code> 函数的实现原理，就是将 <strong>Generator 函数</strong>和<strong>自动执行器</strong>，包装在一个函数里。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">fn</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="c1">// 等同于</span>
<span class="kd">function</span> <span class="nf">fn</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">spawn</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div> <p>所有的 <code class="language-plaintext highlighter-rouge">async</code> 函数都可以写成上面的第二种形式，其中的 <code class="language-plaintext highlighter-rouge">spawn</code> 函数就是自动执行器。</p> <p>下面是 <code class="language-plaintext highlighter-rouge">spawn</code> 函数的实现，基本就是前文自动执行器的翻版。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">spawn</span><span class="p">(</span><span class="nx">genF</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nf">genF</span><span class="p">();</span>
    <span class="kd">function</span> <span class="nf">step</span><span class="p">(</span><span class="nx">nextF</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">next</span><span class="p">;</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="nx">next</span> <span class="o">=</span> <span class="nf">nextF</span><span class="p">();</span>
      <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nf">reject</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nf">resolve</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">value</span><span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">step</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
        <span class="p">});</span>
      <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">step</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">gen</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
        <span class="p">});</span>
      <span class="p">});</span>
    <span class="p">}</span>
    <span class="nf">step</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="四顶层-await">四、顶层 await</h2> <p>从 ES2022 开始，允许在模块的顶层独立使用 <code class="language-plaintext highlighter-rouge">await</code> 命令。它的主要目的是使用 <code class="language-plaintext highlighter-rouge">await</code> 解决模块异步加载的问题。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// awaiting.js</span>
<span class="kd">const</span> <span class="nx">dynamic</span> <span class="o">=</span> <span class="k">import</span><span class="p">(</span><span class="nx">someMission</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nf">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">output</span> <span class="o">=</span> <span class="nf">someProcess</span><span class="p">((</span><span class="k">await</span> <span class="nx">dynamic</span><span class="p">).</span><span class="k">default</span><span class="p">,</span> <span class="k">await</span> <span class="nx">data</span><span class="p">);</span>
</code></pre></div></div> <p>上面代码中，两个异步操作在输出的时候，都加上了 <code class="language-plaintext highlighter-rouge">await</code> 命令。只有等到异步操作完成，这个模块才会输出值。加载这个模块的写法如下。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// usage.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">output</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./awaiting.js</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">function</span> <span class="nf">outputPlusValue</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">output</span> <span class="o">+</span> <span class="nx">value</span> <span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">outputPlusValue</span><span class="p">(</span><span class="mi">100</span><span class="p">));</span>
</code></pre></div></div> <p>注意，顶层 <code class="language-plaintext highlighter-rouge">await</code> 只能用在 ES6 模块，不能用在 CommonJS 模块。这是因为 CommonJS 模块的 <code class="language-plaintext highlighter-rouge">require()</code> 是同步加载，如果有顶层 <code class="language-plaintext highlighter-rouge">await</code>，就没法处理加载了。</p> <h2 id="六参考">六、参考</h2> <ul> <li>阮一峰，<a href="https://es6.ruanyifeng.com/#docs/async">async 函数</a></li> <li>MDN，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await">await</a></li> </ul>]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[一、含义]]></summary></entry><entry><title type="html">ES6 - Class</title><link href="https://feng-zhang0712.github.io//blog/2024/class/" rel="alternate" type="text/html" title="ES6 - Class"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/class</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/class/"><![CDATA[<h2 id="一class-的基本语法">一、Class 的基本语法</h2> <h3 id="11-类的由来">1.1 类的由来</h3> <p>ES6 引入了 Class（类）的概念，通过 <code class="language-plaintext highlighter-rouge">class</code> 关键字，可以定义类。</p> <p>（1）ES6 的类，可以看作构造函数的另一种写法。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="k">typeof</span> <span class="nx">Point</span> <span class="c1">// "function"</span>
<span class="nx">Point</span> <span class="o">===</span> <span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="kd">constructor</span> <span class="c1">// true</span>
</code></pre></div></div> <p>上面代码表明，类的数据类型就是函数，类本身就指向构造函数。</p> <p>（2）类的所有方法都定义在类的 <code class="language-plaintext highlighter-rouge">prototype</code> 属性上面。因此，在类的实例上面调用方法，其实就是调用原型上的方法。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
  <span class="nf">toString</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
  <span class="nf">toValue</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 等同于</span>
<span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">()</span> <span class="p">{},</span>
  <span class="nf">toString</span><span class="p">()</span> <span class="p">{},</span>
  <span class="nf">toValue</span><span class="p">()</span> <span class="p">{},</span>
<span class="p">};</span>
</code></pre></div></div> <p>（3）<code class="language-plaintext highlighter-rouge">prototype</code> 对象的 <code class="language-plaintext highlighter-rouge">constructor</code> 属性，直接指向“类”的本身，这与 ES5 的行为是一致的。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Point</span> <span class="c1">// true</span>
</code></pre></div></div> <p>（4）类的内部所有定义的方法，都是不可枚举的（non-enumerable）。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
  <span class="nf">toString</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nb">Object</span><span class="p">.</span><span class="nf">keys</span><span class="p">(</span><span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
<span class="c1">// []</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">getOwnPropertyNames</span><span class="p">(</span><span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
<span class="c1">// ["constructor","toString"]</span>
</code></pre></div></div> <h3 id="12-constructor-方法">1.2 constructor() 方法</h3> <p><code class="language-plaintext highlighter-rouge">constructor</code> 方法是类的默认方法，通过 <code class="language-plaintext highlighter-rouge">new</code> 命令生成对象实例时，自动调用该方法。一个类必须有 <code class="language-plaintext highlighter-rouge">constructor</code> 方法，如果没有显式定义，一个空的 <code class="language-plaintext highlighter-rouge">constructor</code> 方法会被默认添加。</p> <h3 id="13-类的实例">1.3 类的实例</h3> <p>类的属性和方法，除非显式定义在其本身（即定义在 this 对象上），否则都是定义在原型上（即定义在 class 上）。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nf">toString</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">'</span><span class="s1">(</span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">, </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">)</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">point</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>

<span class="nx">point</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span> <span class="c1">// (2, 3)</span>

<span class="nx">point</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// true</span>
<span class="nx">point</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">y</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// true</span>
<span class="nx">point</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">toString</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// false</span>
<span class="nx">point</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">toString</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// true</span>
</code></pre></div></div> <h3 id="14-实例属性的新写法">1.4 实例属性的新写法</h3> <p>ES2022 规定，实例属性除了可以定义在 <code class="language-plaintext highlighter-rouge">constructor</code> 方法里面的 <code class="language-plaintext highlighter-rouge">this</code> 上面，也可以定义在类内部的最顶层。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">IncreasingCounter</span> <span class="p">{</span>
  <span class="nx">_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">get</span> <span class="nf">value</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Getting the current value!</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_count</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_count</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码中，实例属性 <code class="language-plaintext highlighter-rouge">_count</code> 与取值函数 <code class="language-plaintext highlighter-rouge">value</code> 方法和 <code class="language-plaintext highlighter-rouge">increment</code> 方法，处于同一个层级。这时，不需要在实例属性前面加上 <code class="language-plaintext highlighter-rouge">this</code>。</p> <p>注意，新写法定义的属性是实例对象自身的属性，而不是定义在实例对象的原型上面。</p> <h3 id="15-取值函数getter和存值函数setter">1.5 取值函数（getter）和存值函数（setter）</h3> <p>类的内部可以使用 <code class="language-plaintext highlighter-rouge">get</code> 和 <code class="language-plaintext highlighter-rouge">set</code> 关键字，对某个属性设置存值函数和取值函数。他们设置在属性的 Descriptor 对象上。</p> <h3 id="16-属性表达式">1.6 属性表达式</h3> <p>类的属性名，可以采用表达式。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">methodName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">getArea</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">Square</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
  <span class="p">[</span><span class="nx">methodName</span><span class="p">]()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="17-静态方法">1.7 静态方法</h3> <p>（1）如果静态方法包含 <code class="language-plaintext highlighter-rouge">this</code> 关键字，这个 <code class="language-plaintext highlighter-rouge">this</code> 指的是类，而不是实例。</p> <p>（2）父类的静态方法，可以被子类继承。</p> <p>（3）静态方法可以从 <code class="language-plaintext highlighter-rouge">super</code> 对象上调用。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Foo</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nf">classMethod</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Bar</span> <span class="kd">extends</span> <span class="nc">Foo</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nf">classMethod</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="nf">classMethod</span><span class="p">()</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">, too</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">Bar</span><span class="p">.</span><span class="nf">classMethod</span><span class="p">()</span> <span class="c1">// "hello, too"</span>
</code></pre></div></div> <h3 id="18-静态属性">1.8 静态属性</h3> <p>在实例属性的前面，加上 <code class="language-plaintext highlighter-rouge">static</code> 关键字，就表示静态属性。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">myStaticProp</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="19-私有方法和私有属性">1.9 私有方法和私有属性</h3> <p>ES2022 为 <code class="language-plaintext highlighter-rouge">class</code> 添加了私有属性，方法是在属性名之前使用 <code class="language-plaintext highlighter-rouge">#</code> 表示。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">IncreasingCounter</span> <span class="p">{</span>
  <span class="err">#</span><span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">get</span> <span class="nf">value</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Getting the current value!</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">count</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">count</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">#count</code> 就是私有属性，只能在类的内部使用 <code class="language-plaintext highlighter-rouge">this.#count</code>。如果在类的外部使用，就会报错。</p> <p>这种写法还可以用来写私有方法。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Foo</span> <span class="p">{</span>
  <span class="err">#</span><span class="nx">a</span><span class="p">;</span>
  <span class="err">#</span><span class="nx">b</span><span class="p">;</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="err">#</span><span class="nf">sum</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">a</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">b</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>私有属性也可以设置 <code class="language-plaintext highlighter-rouge">getter</code> 和 <code class="language-plaintext highlighter-rouge">setter</code> 方法。</p> <p>ES2022 改进了 <code class="language-plaintext highlighter-rouge">in</code> 运算符，使它也可以用来判断私有属性，此时，<code class="language-plaintext highlighter-rouge">in</code> 只能用在类的内部。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">C</span> <span class="p">{</span>
  <span class="err">#</span><span class="nx">brand</span><span class="p">;</span>

  <span class="kd">static</span> <span class="nf">isC</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="err">#</span><span class="nx">brand</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 私有属性 #brand 存在</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// 私有属性 #foo 不存在</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="110-静态块">1.10 静态块</h3> <p>ES2022 引入了静态块（static block），允许在类的内部设置一个代码块，在类生成时运行且只运行一次，主要作用是对静态属性进行初始化。以后，新建类的实例时，这个块就不运行了。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">C</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="111-类的注意点">1.11 类的注意点</h3> <h4 id="1严格模式">（1）严格模式</h4> <p>类和模块的内部，默认是严格模式。</p> <h4 id="2不存在提升">（2）不存在提升</h4> <p>类不存在变量提升，这也就意味着，ES6 不会把类的声明提升到代码头部。</p> <h4 id="3name-属性">（3）name 属性</h4> <p>ES6 的类是 ES5 的构造函数的一层包装，所以函数的许多特性都被 Class 继承，包括 <code class="language-plaintext highlighter-rouge">name</code> 属性。<code class="language-plaintext highlighter-rouge">name</code> 属性总是返回紧跟在 <code class="language-plaintext highlighter-rouge">class</code> 关键字后面的类名。</p> <h4 id="4this-的指向">（4）this 的指向</h4> <p>类的方法内部如果含有 <code class="language-plaintext highlighter-rouge">this</code>，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Logger</span> <span class="p">{</span>
  <span class="nf">printName</span><span class="p">(</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">there</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nf">print</span><span class="p">(</span><span class="s2">`Hello </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nf">print</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Logger</span><span class="p">();</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">printName</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">logger</span><span class="p">;</span>
<span class="nf">printName</span><span class="p">();</span> <span class="c1">// TypeError: Cannot read property 'print' of undefined</span>
</code></pre></div></div> <p>解决办法是，在构造方法中对 <code class="language-plaintext highlighter-rouge">this</code> 进行绑定，或者使用箭头函数。</p> <h3 id="112-newtarget-属性">1.12 new.target 属性</h3> <p>ES6 引入了 <code class="language-plaintext highlighter-rouge">new.target</code> 属性，该属性一般用在构造函数之中，返回 <code class="language-plaintext highlighter-rouge">new</code> 命令作用于的那个构造函数。如果构造函数不是通过 <code class="language-plaintext highlighter-rouge">new</code> 命令或 <code class="language-plaintext highlighter-rouge">Reflect.construct</code> 方法调用的，<code class="language-plaintext highlighter-rouge">new.target</code> 会 返回 <code class="language-plaintext highlighter-rouge">undefined</code>，因此这个属性可以用来确定构造函数是怎么调用的。</p> <p>（1）Class 内部调用 <code class="language-plaintext highlighter-rouge">new.target</code>，返回当前 Class。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Rectangle</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">new</span><span class="p">.</span><span class="nx">target</span> <span class="o">===</span> <span class="nx">Rectangle</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Rectangle</span><span class="p">();</span> <span class="c1">// 输出 true</span>
</code></pre></div></div> <p>（2）子类继承父类时，<code class="language-plaintext highlighter-rouge">new.target</code> 会返回子类。利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Shape</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="k">new</span><span class="p">.</span><span class="nx">target</span> <span class="o">===</span> <span class="nx">Shape</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">本类不能实例化</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nc">Rectangle</span> <span class="kd">extends</span> <span class="nc">Shape</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">length</span><span class="p">,</span> <span class="nx">width</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">();</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Shape</span><span class="p">();</span>  <span class="c1">// 报错</span>
<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Rectangle</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>  <span class="c1">// 正确</span>
</code></pre></div></div> <p>上面代码中，Shape 类不能被实例化，只能用于继承。</p> <p>（3）在函数外部，使用 <code class="language-plaintext highlighter-rouge">new.target</code> 会报错。</p> <h2 id="二class-的继承">二、Class 的继承</h2> <h3 id="21-简介">2.1 简介</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="22-私有属性和私有方法的继承">2.2 私有属性和私有方法的继承</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="23-静态属性和静态方法的继承">2.3 静态属性和静态方法的继承</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="24-objectgetprototypeof">2.4 Object.getPrototypeOf()</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="25-super-关键字">2.5 super 关键字</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="26-类的-prototype-属性和-proto-属性">2.6 类的 prototype 属性和 <strong>proto</strong> 属性</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="27-原生构造函数的继承">2.7 原生构造函数的继承</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="28-mixin-模式的实现">2.8 Mixin 模式的实现</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h2 id="三参考">三、参考</h2> <ul> <li>阮一峰，<a href="https://es6.ruanyifeng.com/#docs/class">Class 的基本语法</a></li> <li>阮一峰，<a href="https://es6.ruanyifeng.com/#docs/class-extends">Class 的继承</a></li> </ul>]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[一、Class 的基本语法]]></summary></entry><entry><title type="html">ES6 - Decorator</title><link href="https://feng-zhang0712.github.io//blog/2024/decorator/" rel="alternate" type="text/html" title="ES6 - Decorator"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/decorator</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/decorator/"><![CDATA[<p>ES6 中的装饰器（Decorator）是一种用于修改类和类方法行为的语法糖。装饰器提供了一种方便的方式来添加注释或元数据，或者在实际定义时修改类和类方法。需要注意的是，尽管装饰器的提案已经达到第2阶段（Stage 2），但它们尚未成为正式的 ECMAScript 标准。</p> <h2 id="一装饰器的定义和基本用法">一、装饰器的定义和基本用法</h2> <h3 id="1-定义">1. 定义</h3> <p>装饰器是一个函数，用于修改类的行为。它可以应用于类、类的方法、访问器（getter/setter）、属性、以及方法参数。</p> <h3 id="2-使用场景">2. 使用场景</h3> <p>装饰器常用于日志记录、访问控制、性能监控、依赖注入等场景。</p> <h3 id="3-基本语法">3. 基本语法</h3> <p>装饰器通过在类或类成员之前加 <code class="language-plaintext highlighter-rouge">@</code> 标志来调用。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">readonly</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">descriptor</span><span class="p">.</span><span class="nx">writable</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">descriptor</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">readonly</span>
  <span class="nf">getName</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Alice</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nf">getName</span><span class="p">());</span> <span class="c1">// 输出 "Alice"</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="dl">'</span><span class="s1">Bob</span><span class="dl">'</span><span class="p">;</span> <span class="p">};</span> <span class="c1">// 抛出错误，因为 getName 是只读的</span>
</code></pre></div></div> <h2 id="二装饰器的参数">二、装饰器的参数</h2> <p>装饰器函数通常接受以下参数：</p> <ul> <li><code class="language-plaintext highlighter-rouge">target</code>：装饰的目标（类的原型对象或类的构造函数）</li> <li><code class="language-plaintext highlighter-rouge">key</code>：装饰的属性名称</li> <li><code class="language-plaintext highlighter-rouge">descriptor</code>：属性描述符</li> </ul> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">log</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">originalMethod</span> <span class="o">=</span> <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
  <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Calling </span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2"> with arguments: </span><span class="p">${</span><span class="nx">args</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">originalMethod</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">descriptor</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Calculator</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">log</span>
  <span class="nf">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Calculator</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">calculator</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span> <span class="c1">// 输出 "Calling add with arguments: 2,3" 和 5</span>
</code></pre></div></div> <h2 id="三装饰器的类型">三、装饰器的类型</h2> <h3 id="1-类装饰器">1. 类装饰器</h3> <p>类装饰器用于类的定义，可以修改或替换类的构造函数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">sealed</span><span class="p">(</span><span class="kd">constructor</span><span class="p">)</span> <span class="p">{</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nf">seal</span><span class="p">(</span><span class="kd">constructor</span><span class="p">);</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nf">seal</span><span class="p">(</span><span class="kd">constructor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">sealed</span>
<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="2-方法装饰器">2. 方法装饰器</h3> <p>方法装饰器用于类的方法，可以修改方法的属性描述符。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">enumerable</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">descriptor</span><span class="p">.</span><span class="nx">enumerable</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">enumerable</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
  <span class="nf">getName</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="3-访问器装饰器">3. 访问器装饰器</h3> <p>访问器装饰器用于类的访问器（getter/setter）。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">configurable</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">descriptor</span><span class="p">.</span><span class="nx">configurable</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">configurable</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
  <span class="kd">get</span> <span class="nf">name</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">set</span> <span class="nf">name</span><span class="p">(</span><span class="nx">newName</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">=</span> <span class="nx">newName</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="4-属性装饰器">4. 属性装饰器</h3> <p>属性装饰器用于类的属性。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">readonly</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">descriptor</span><span class="p">.</span><span class="nx">writable</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">descriptor</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">readonly</span>
  <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Alice</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="5-参数装饰器">5. 参数装饰器</h3> <p>参数装饰器用于类方法的参数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">logParameter</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">metadataKey</span> <span class="o">=</span> <span class="s2">`log_</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2">_parameters`</span><span class="p">;</span>
  <span class="k">if </span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nf">isArray</span><span class="p">(</span><span class="nx">target</span><span class="p">[</span><span class="nx">metadataKey</span><span class="p">]))</span> <span class="p">{</span>
    <span class="nx">target</span><span class="p">[</span><span class="nx">metadataKey</span><span class="p">].</span><span class="nf">push</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">target</span><span class="p">[</span><span class="nx">metadataKey</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">index</span><span class="p">];</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">greet</span><span class="p">(@</span><span class="nd">logParameter</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="四装饰器的实际使用场景">四、装饰器的实际使用场景</h2> <h3 id="1-日志记录">1. 日志记录</h3> <p>使用装饰器记录方法调用的日志。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">log</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">originalMethod</span> <span class="o">=</span> <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
  <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Calling </span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2"> with arguments: </span><span class="p">${</span><span class="nx">args</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">originalMethod</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">descriptor</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">log</span>
  <span class="nf">sayHello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nf">sayHello</span><span class="p">(</span><span class="dl">'</span><span class="s1">Alice</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// 输出日志并返回 "Hello, Alice"</span>
</code></pre></div></div> <h3 id="2-权限控制">2. 权限控制</h3> <p>使用装饰器检查用户权限。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">checkPermission</span><span class="p">(</span><span class="nx">role</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">originalMethod</span> <span class="o">=</span> <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
    <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">userRole</span> <span class="o">!==</span> <span class="nx">role</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Permission denied</span><span class="dl">'</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="nx">originalMethod</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">return</span> <span class="nx">descriptor</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">role</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">userRole</span> <span class="o">=</span> <span class="nx">role</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">checkPermission</span><span class="p">(</span><span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">)</span>
  <span class="nf">deleteUser</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">User deleted</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">admin</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="p">(</span><span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">admin</span><span class="p">.</span><span class="nf">deleteUser</span><span class="p">();</span> <span class="c1">// 输出 "User deleted"</span>

<span class="kd">const</span> <span class="nx">guest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="p">(</span><span class="dl">'</span><span class="s1">guest</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">guest</span><span class="p">.</span><span class="nf">deleteUser</span><span class="p">();</span> <span class="c1">// 抛出 "Permission denied"</span>
</code></pre></div></div> <h3 id="3-性能监控">3. 性能监控</h3> <p>使用装饰器监控方法的执行时间。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">time</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">originalMethod</span> <span class="o">=</span> <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
  <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">originalMethod</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">end</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2"> took </span><span class="p">${(</span><span class="nx">end</span> <span class="o">-</span> <span class="nx">start</span><span class="p">).</span><span class="nf">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">)}</span><span class="s2"> ms`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">descriptor</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Calculator</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">time</span>
  <span class="nf">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Calculator</span><span class="p">();</span>
<span class="nx">calculator</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// 输出执行时间</span>
</code></pre></div></div> <h2 id="五注意事项">五、注意事项</h2> <ol> <li><strong>装饰器的执行顺序</strong>：装饰器从下到上、从右到左执行。</li> <li><strong>兼容性</strong>：装饰器目前是实验特性，需要 Babel 或 TypeScript 等编译器的支持。</li> </ol>]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[ES6 中的装饰器（Decorator）是一种用于修改类和类方法行为的语法糖。装饰器提供了一种方便的方式来添加注释或元数据，或者在实际定义时修改类和类方法。需要注意的是，尽管装饰器的提案已经达到第2阶段（Stage 2），但它们尚未成为正式的 ECMAScript 标准。]]></summary></entry><entry><title type="html">ES6 - Function</title><link href="https://feng-zhang0712.github.io//blog/2024/function/" rel="alternate" type="text/html" title="ES6 - Function"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/function</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/function/"><![CDATA[]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[]]></summary></entry></feed>