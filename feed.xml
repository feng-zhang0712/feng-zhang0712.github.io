<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://feng-zhang0712.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://feng-zhang0712.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-15T17:23:33+00:00</updated><id>https://feng-zhang0712.github.io//feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">计算机网络 - 应用层</title><link href="https://feng-zhang0712.github.io//blog/2024/application-layer/" rel="alternate" type="text/html" title="计算机网络 - 应用层"/><published>2024-09-15T00:00:00+00:00</published><updated>2024-09-15T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/application-layer</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/application-layer/"><![CDATA[]]></content><author><name></name></author><category term="computer"/><category term="computer"/><category term="networks"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">计算机网络 - 运输层</title><link href="https://feng-zhang0712.github.io//blog/2024/transport-layer/" rel="alternate" type="text/html" title="计算机网络 - 运输层"/><published>2024-09-14T00:00:00+00:00</published><updated>2024-09-14T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/transport-layer</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/transport-layer/"><![CDATA[]]></content><author><name></name></author><category term="computer"/><category term="computer"/><category term="networks"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">响应式 Web 设计</title><link href="https://feng-zhang0712.github.io//blog/2024/responsive-web-design/" rel="alternate" type="text/html" title="响应式 Web 设计"/><published>2024-09-14T00:00:00+00:00</published><updated>2024-09-14T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/responsive-web-design</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/responsive-web-design/"><![CDATA[<p>本文是对 <a href="https://benfrain.com/">Ben Frain</a> 的《响应式 Web 设计：HTML5和CSS3实战 - 第二版》的读书摘要。</p> <h2 id="一简介">一、简介</h2> <p>响应式 Web 设计，指网页内容会随着访问它的视口及设备的不同而呈现不同的样式。W3C 对媒体查询下的定义是：媒体查询包含媒体类型和零个或多个检测媒体特性的表达式（比如，<code class="language-plaintext highlighter-rouge">width</code>、<code class="language-plaintext highlighter-rouge">height</code> 和 <code class="language-plaintext highlighter-rouge">color</code> 都是可用于媒体查询的特性）。使用媒体查询，可以不必修改内容本身，而让网页适配不同的设备。</p> <p>在响应式设计的早期，人们会针对不同的流行的设备宽度设置<strong>断点</strong>，所谓“断点”，就是某个宽度临界点，跨过这个点布局就会发生显著变化。显然，这并不是一个好的做法，因为这样实际上把设计跟特定的屏幕大小绑定了。既然是响应式设计，那应该与显示它的设备无关才对，而不是只在某些屏幕中才最合适。断点应该由内容和设计本身决定，也就是，根据项目的实际需求设计决定。</p> <h2 id="二媒体查询">二、媒体查询</h2> <p><strong>媒体查询</strong>（Media Queries）主要用于设计响应式 Web 设计，使网页能够适应不同的设备和屏幕尺寸。即根据设备的特性（如屏幕宽度、高度、分辨率等）应用不同的样式。</p> <p>常用媒体特性如下。</p> <ul> <li><code class="language-plaintext highlighter-rouge">width</code>：视口的宽度。</li> <li><code class="language-plaintext highlighter-rouge">height</code>：视口的高度。</li> <li><code class="language-plaintext highlighter-rouge">device-width</code>：设备屏幕的宽度。</li> <li><code class="language-plaintext highlighter-rouge">device-height</code>：设备屏幕的高度。</li> <li><code class="language-plaintext highlighter-rouge">resolution</code>：设备屏幕的分辨率，通常以 dpi（每英寸点数）或 dppx（每像素点数）表示。</li> <li><code class="language-plaintext highlighter-rouge">orientation</code>：设备的方向，可以是 <code class="language-plaintext highlighter-rouge">portrait</code> 或 <code class="language-plaintext highlighter-rouge">landscape</code>。</li> <li><code class="language-plaintext highlighter-rouge">aspect-ratio</code>：视口的宽高比。不如，16∶9 的宽屏显示器可以写成 <code class="language-plaintext highlighter-rouge">aspect-ratio: 16/9</code>。</li> <li><code class="language-plaintext highlighter-rouge">color</code>：设备的颜色位深。</li> <li><code class="language-plaintext highlighter-rouge">color-index</code>：设备颜色查找表中的条目数，值必须是数值，且不能为负。</li> <li><code class="language-plaintext highlighter-rouge">monochrome</code>：单色帧缓冲中表示每个像素的位数，值必须是数值（整数），比如 <code class="language-plaintext highlighter-rouge">monochrome: 2</code>，且不能为负。</li> <li><code class="language-plaintext highlighter-rouge">scan</code>：针对电视的逐行扫描（progressive）和隔行扫描（interlace）。例如 720p HD TV（720p 中的 p 表示progressive，即逐行）可以使用 <code class="language-plaintext highlighter-rouge">scan: progressive</code> 来判断； 而 1080i HD TV（1080i 中的 i 表示 interlace，即隔行）可以使用 <code class="language-plaintext highlighter-rouge">scan: interlace</code> 来判断。</li> <li><code class="language-plaintext highlighter-rouge">grid</code>：设备基于栅格还是位图。</li> </ul> <p>上面列表中的特性，除 <code class="language-plaintext highlighter-rouge">grid</code> 外，都可以加上 <code class="language-plaintext highlighter-rouge">min-</code> 或 <code class="language-plaintext highlighter-rouge">max-</code> 前缀以指定范围。</p> <h3 id="21-媒体查询的语法">2.1 媒体查询的语法</h3> <p>下面是一个最简单的媒体查询语法结构。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@media</span> <span class="n">media-type</span> <span class="n">and</span> <span class="p">(</span><span class="n">media-feature</span><span class="p">)</span> <span class="p">{</span>
  <span class="c">/* CSS规则 */</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">media-type</code>：指定设备类型，如 <code class="language-plaintext highlighter-rouge">screen</code>、<code class="language-plaintext highlighter-rouge">print</code> 等。可以省略，表示适用于所有类型（此时 <code class="language-plaintext highlighter-rouge">media-type: all</code>）。</li> <li><code class="language-plaintext highlighter-rouge">media-feature</code>：指定的媒体特性，如 <code class="language-plaintext highlighter-rouge">max-width</code>、<code class="language-plaintext highlighter-rouge">min-width</code> 等。</li> </ul> <p>也可以在 <code class="language-plaintext highlighter-rouge">&lt;link&gt;</code> 标签的 <code class="language-plaintext highlighter-rouge">media</code> 属性中指定设备类型。</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"style sheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">media=</span><span class="s">"screen"</span> <span class="na">href=</span><span class="s">"style.css"</span><span class="nt">&gt;</span> 
</code></pre></div></div> <h3 id="22-组合媒体查询">2.2 组合媒体查询</h3> <p>多个媒体查询组合，使用逗号（<code class="language-plaintext highlighter-rouge">,</code>）分隔不同的查询条件。表示如果任意一个条件为真则应用样式。还可以使用逻辑运算符 <code class="language-plaintext highlighter-rouge">and</code>、<code class="language-plaintext highlighter-rouge">or</code>、<code class="language-plaintext highlighter-rouge">not</code> 组合多个条件。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 适用于屏幕最大宽度为600px或屏幕高度为 800px 的设备 */</span>
<span class="k">@media</span> <span class="n">screen</span> <span class="n">and</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">600px</span><span class="p">),</span> <span class="n">screen</span> <span class="n">and</span> <span class="p">(</span><span class="n">max-height</span><span class="p">:</span> <span class="m">800px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nt">body</span> <span class="p">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="no">lightblue</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c">/* 适用于屏幕宽度在 600px 到 1200px 之间且横向模式的设备 */</span>
<span class="k">@media</span> <span class="n">screen</span> <span class="n">and</span> <span class="p">(</span><span class="n">min-width</span><span class="p">:</span> <span class="m">600px</span><span class="p">)</span> <span class="n">and</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">1200px</span><span class="p">)</span> <span class="n">and</span> <span class="p">(</span><span class="n">orientation</span><span class="p">:</span> <span class="nb">landscape</span><span class="p">)</span> <span class="p">{</span>
  <span class="nt">body</span> <span class="p">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="no">lightgreen</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>可以在使用 <code class="language-plaintext highlighter-rouge">@import</code> 导入 CSS 时使用媒体查询，有条件地向当前样式表中加载其他样式表。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="sx">url("phone.css")</span> <span class="n">screen</span> <span class="n">and</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span><span class="m">360px</span><span class="p">);</span> 
</code></pre></div></div> <p>上面的代码表示，<code class="language-plaintext highlighter-rouge">phone.css</code> 样式表生效的条件是：设备类型必须是屏幕设备，且视口不超过 360px。</p> <p>注意，在针对所有设备的媒体查询中，可以使用简写语法，即省略关键字 <code class="language-plaintext highlighter-rouge">all</code>（以及紧随其后的 <code class="language-plaintext highlighter-rouge">and</code>）。换句话说，如果不指定关键字，则关键字就是 <code class="language-plaintext highlighter-rouge">all</code>。</p> <h3 id="23-视口的-meta-标签">2.3 视口的 meta 标签</h3> <p>视口的 <code class="language-plaintext highlighter-rouge">meta</code> 标签，是网页与移动浏览器的接口。网页通过这个标签告诉移动浏览器，它希望浏览器如何渲染当前页面。视口的 <code class="language-plaintext highlighter-rouge">meta</code> 标签主要使用以下几个属性控制页面在移动端的行为。</p> <ul> <li><code class="language-plaintext highlighter-rouge">width</code>：用于设置页面的宽度。</li> <li><code class="language-plaintext highlighter-rouge">height</code>：用于设置页面的高度，通常设置了 <code class="language-plaintext highlighter-rouge">width</code> 就不会再设置 <code class="language-plaintext highlighter-rouge">height</code>。</li> <li><code class="language-plaintext highlighter-rouge">initial-scale</code>：设置页面的初始缩放比例。</li> <li><code class="language-plaintext highlighter-rouge">user-scalable</code>：一个布尔值，用于设置页面是否可以缩放。</li> <li><code class="language-plaintext highlighter-rouge">minimum-scale</code>：设置页面的最小缩放比例，只有在 <code class="language-plaintext highlighter-rouge">user-scalable=true</code> 时，此属性才会生效。</li> <li><code class="language-plaintext highlighter-rouge">maximum-scale</code>：设置页面的最大缩放比例，只有在 <code class="language-plaintext highlighter-rouge">user-scalable=true</code> 时，此属性才会生效。</li> </ul> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nt">meta</span> <span class="nt">name</span><span class="o">=</span><span class="s1">"viewport"</span> <span class="nt">content</span><span class="o">=</span><span class="s1">"width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=0.5, maximum-scale=3"</span> <span class="o">/&gt;</span> 
</code></pre></div></div> <p>上面的代码表示，在移动设备上，页面的宽度为设备宽度，页面初始的缩放比例为 1，允许用户进行缩放操作，且最小和最大缩放比例分别为 0.5 和 3。</p> <h2 id="三弹性布局与响应式图片">三、弹性布局与响应式图片</h2> <h3 id="31-flex-布局">3.1 Flex 布局</h3> <h3 id="32-grid-布局">3.2 Grid 布局</h3> <h3 id="33-响应式图片">3.3 响应式图片</h3> <h2 id="四h5-与响应式-web-设计">四、H5 与响应式 Web 设计</h2> <h3 id="41-h5-页面结构新特性">4.1 H5 页面结构新特性</h3> <p>（1）<code class="language-plaintext highlighter-rouge">doctype</code>：用于告诉浏览器文档类型。相比于 H4 的写法，新写法简化了很多。</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
</code></pre></div></div> <p>（2）<code class="language-plaintext highlighter-rouge">lang 属性</code>：用于指定文档使用的语言。</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
</code></pre></div></div> <p>（3）<code class="language-plaintext highlighter-rouge">charset</code>：<code class="language-plaintext highlighter-rouge">charset</code> 属性用于指定字符编码。除非有特殊需要，否则 <code class="language-plaintext highlighter-rouge">charset</code> 的属性值一般都是 <code class="language-plaintext highlighter-rouge">utf-8</code>。</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
</code></pre></div></div> <h3 id="42-h5-结构化元素">4.2 H5 结构化元素</h3> <p>（1）<code class="language-plaintext highlighter-rouge">&lt;main&gt;</code>：用于表示页面的主内容区。通常，每个页面的主内容区只能有一个，而且不能作为 <code class="language-plaintext highlighter-rouge">article</code>、<code class="language-plaintext highlighter-rouge">aside</code>、<code class="language-plaintext highlighter-rouge">header</code>、<code class="language-plaintext highlighter-rouge">footer</code>、<code class="language-plaintext highlighter-rouge">nav</code> 或 <code class="language-plaintext highlighter-rouge">header</code> 等其他 H5 语义元素的后代。</p> <p>（2）<code class="language-plaintext highlighter-rouge">&lt;section&gt;</code>：用于定义文档或应用中一个通用的区块。比如，某块内容包含自然标题（h1 ~ h6），就可以使用 <code class="language-plaintext highlighter-rouge">&lt;section&gt;</code> 标签作为容器。</p> <p>（3）<code class="language-plaintext highlighter-rouge">&lt;nav&gt;</code>：用于包装主导航链接。</p> <p>（4）<code class="language-plaintext highlighter-rouge">&lt;article&gt;</code>：用于包含一个独立的内容块。比如，有博客正文和新闻报道就可以放在 <code class="language-plaintext highlighter-rouge">&lt;article&gt;</code> 中。</p> <p>（5）<code class="language-plaintext highlighter-rouge">&lt;aside&gt;</code>：用于包含与其旁边内容不相关的内容。常用于侧边栏、突出引用、广告和导航元素。</p> <p>（6）<code class="language-plaintext highlighter-rouge">&lt;figure&gt;</code> 和 <code class="language-plaintext highlighter-rouge">&lt;figcaption&gt;</code>：<code class="language-plaintext highlighter-rouge">&lt;figure&gt;</code> 常用于包含注解、图示、照片和代码等。<code class="language-plaintext highlighter-rouge">&lt;figcaption&gt;</code> 可作为 <code class="language-plaintext highlighter-rouge">&lt;figure&gt;</code> 的嵌套元素使用。</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;figure</span> <span class="na">class=</span><span class="s">"MoneyShot"</span><span class="nt">&gt;</span> 
  <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">"MoneyShotImg"</span> <span class="na">src=</span><span class="s">"img/scones.jpg"</span> <span class="na">alt=</span><span class="s">"Incredible scones"</span> <span class="nt">/&gt;</span> 
  <span class="nt">&lt;figcaption</span> <span class="na">class=</span><span class="s">"ImageCaption"</span><span class="nt">&gt;</span>
    Incredible scones, picture from Wikipedia
  <span class="nt">&lt;/figcaption&gt;</span> 
<span class="nt">&lt;/figure&gt;</span> 
</code></pre></div></div> <p>（7）<code class="language-plaintext highlighter-rouge">&lt;detail&gt;</code> 和 <code class="language-plaintext highlighter-rouge">&lt;summary&gt;</code>：这两个元素经常成对出现，比如，我们经常使用的“展开/收起”部件，就可以用它们来实现。</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;details&gt;</span> 
  <span class="nt">&lt;summary&gt;</span>I ate 15 scones in one day<span class="nt">&lt;/summary&gt;</span> 
  <span class="nt">&lt;p&gt;</span>Of course I didn't. It would probably kill me if I did. What a way to go. Mmmmmm, scones!<span class="nt">&lt;/p&gt;</span> 
<span class="nt">&lt;/details&gt;</span>
</code></pre></div></div> <p>在不添加任何样式的请款下，上面代码的（展开）效果如下。</p> <p><img src="/assets/images/css/detail-and-summary.png" alt="details and summary tag"/></p> <p>（8）<code class="language-plaintext highlighter-rouge">&lt;header&gt;</code>：常用在站点页头作为“报头”。它可以在一个页面中出现多次（比如，页面中每个 <code class="language-plaintext highlighter-rouge">&lt;section&gt;</code> 中都可以有一个 <code class="language-plaintext highlighter-rouge">&lt;header&gt;</code>）。</p> <p>（9）<code class="language-plaintext highlighter-rouge">&lt;footer&gt;</code>：常用于在相应区块中包含与区块相关的内容，可以包含指向其他文档的链接，或者版权声明。<code class="language-plaintext highlighter-rouge">&lt;footer&gt;</code> 同样可以在页面中出现多次。</p> <p>（10）<code class="language-plaintext highlighter-rouge">&lt;address&gt;</code>：用于标记联系人信息，比如地址信息。</p> <p>（11）<code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code> ~ <code class="language-plaintext highlighter-rouge">&lt;h6&gt;</code>：h1 到 h6 元素不能用于标记副标题、字幕、广告语，除非想把它们用作新区块或子区块的标题。</p> <h3 id="43-h5-文本级元素">4.3 H5 文本级元素</h3> <p>（1）<code class="language-plaintext highlighter-rouge">&lt;b&gt;</code>：表示只为引人注意而标记的文本，不传达更多的重要性信息，也不用于表达其他的愿望或情绪。比如，不用于文章摘要中的关键词、评测当中的产品名、交互式文本程序中的可执行命令，等等。</p> <p>（2）<code class="language-plaintext highlighter-rouge">&lt;em&gt;</code>：表示内容中需要强调的部分。</p> <p>（3）<code class="language-plaintext highlighter-rouge">&lt;i&gt;</code>：表示一段文本，用于表示另一种愿望或情绪，或者以突出不同文本形式的方式表达偏离正文的意思。</p> <h3 id="44-新的媒体元素">4.4 新的媒体元素</h3> <p>（1）<code class="language-plaintext highlighter-rouge">&lt;video&gt;</code>：用于在页面中嵌入视频，<code class="language-plaintext highlighter-rouge">&lt;video&gt;</code> 标签必须成对使用。如果浏览器不支持此标签，可以在其中潜入一段文字，用于提示。</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;video</span> <span class="na">src=</span><span class="s">"myVideo.mp4"</span> <span class="na">width=</span><span class="s">"640"</span> <span class="na">height=</span><span class="s">"480"</span><span class="nt">&gt;</span>
  What, do you mean you don't understand HTML5?
<span class="nt">&lt;/video&gt;</span> 
</code></pre></div></div> <p>对于某些旧版本浏览器，可以使用 <code class="language-plaintext highlighter-rouge">&lt;source&gt;</code> 标签以提供后备资源。比如，除了提供 MP4 版本的视频，如果想某些低版本浏览器也能看到视频，可以添加一个 Flash源 作为后备。或者，如果用户浏览器没有任何播放条件，还可以提供一个下载视频的链接。</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;video</span> <span class="na">width=</span><span class="s">"640"</span> <span class="na">height=</span><span class="s">"480"</span> <span class="na">controls</span> <span class="na">preload=</span><span class="s">"auto"</span> <span class="na">loop</span> <span class="na">poster=</span><span class="s">"myVideoPoster.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;source</span> <span class="na">src=</span><span class="s">"video/myVideo.mp4"</span> <span class="na">type=</span><span class="s">"video/mp4"</span><span class="nt">&gt;</span> 
  <span class="nt">&lt;object</span>
    <span class="na">width=</span><span class="s">"640"</span>
    <span class="na">height=</span><span class="s">"480"</span>
    <span class="na">type=</span><span class="s">"application/x-shockwaveflash"</span>
    <span class="na">data=</span><span class="s">"myFlashVideo.SWF"</span>
  <span class="nt">&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"movie"</span> <span class="na">value=</span><span class="s">"myFlashVideo.swf"</span> <span class="nt">/&gt;</span> 
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"flashvars"</span> <span class="na">value=</span><span class="s">"controlbar=over&amp;amp;image=myVideoPoster.jpg&amp;amp;file=myVideo.mp4"</span> <span class="nt">/&gt;</span> 
    <span class="nt">&lt;img</span>
      <span class="na">src=</span><span class="s">"myVideoPoster.png"</span>
      <span class="na">width=</span><span class="s">"640"</span>
      <span class="na">height=</span><span class="s">"480"</span>
      <span class="na">alt=</span><span class="s">"__ TITLE__"</span>
      <span class="na">title=</span><span class="s">"No video playback capabilities, please download the video below"</span>
    <span class="nt">/&gt;</span> 
  <span class="nt">&lt;/object&gt;</span> 
  <span class="nt">&lt;p&gt;</span>
    <span class="nt">&lt;b&gt;</span>Download Video:<span class="nt">&lt;/b&gt;</span> MP4 Format: <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"myVideo.mp4"</span><span class="nt">&gt;</span>"MP4"<span class="nt">&lt;/a&gt;</span> 
  <span class="nt">&lt;/p&gt;</span> 
<span class="nt">&lt;/video&gt;</span>
</code></pre></div></div> <p>通常，很难对不同的视频播放画面做响应式设计，多数情况下，影片的播放比例并不相同。<a href="http://embedresponsively.com/">这里</a> 有一个网站，你可以把视频的 url 地址粘贴进去，就会得到一段响应式代码，从而使得在网页缩放时，视频依然会保持应有的比例。</p> <p>（2）<code class="language-plaintext highlighter-rouge">&lt;audio&gt;</code>：<code class="language-plaintext highlighter-rouge">&lt;audio&gt;</code> 用于在页面中嵌入音频，其用法与 <code class="language-plaintext highlighter-rouge">&lt;video&gt;</code> 类似。</p> <h3 id="45-其他特性">4.5 其他特性</h3> <p>（1）<code class="language-plaintext highlighter-rouge">&lt;a&gt;</code> 标签中可以放多个元素。</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"index.html"</span><span class="nt">&gt;</span> 
  <span class="nt">&lt;h2&gt;</span>The home page<span class="nt">&lt;/h2&gt;</span> 
  <span class="nt">&lt;p&gt;</span>This paragraph also links to the home page<span class="nt">&lt;/p&gt;</span> 
  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"home-image.png"</span> <span class="na">alt=</span><span class="s">"home-slice"</span> <span class="nt">/&gt;</span> 
<span class="nt">&lt;/a&gt;</span> 
</code></pre></div></div> <p>（2）WCAG 和 WAI-ARIA</p> <p>WCAG 和 WAI-ARIA 提供了与无障碍交互相关的标准。</p> <h2 id="五css3-新特性">五、CSS3 新特性</h2> <p>这部分并不会讨论 CSS3 中所有的新特性，而只是讨论跟响应式设计有关的新特性。</p> <h3 id="51-css-响应式多列布局">5.1 CSS 响应式多列布局</h3> <p>以下示例，以下面的代码布局为例进行讲解。</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;main&gt;</span> 
  <span class="nt">&lt;p&gt;</span>lloremipsimLoremipsum dolor sit amet, consectetur ... <span class="nt">&lt;/p&gt;</span> 
  <span class="nt">&lt;p&gt;</span>lloremipsimLoremipsum dolor sit amet, consectetur ... <span class="nt">&lt;/p&gt;</span> 
<span class="nt">&lt;/main&gt;</span>
</code></pre></div></div> <p>（1）使用 CSS 多列布局可以通过几种方式让文本分成多列显示。比如，可以给每列设定固定的列宽。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">main</span> <span class="p">{</span> 
  <span class="nl">column-width</span><span class="p">:</span> <span class="m">12em</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div></div> <p>上面的代码表示，设置没列的宽度为 12em，改变视口宽度时，列宽不变，列数动态改变。</p> <p>（2）固定列数，可变宽度。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">main</span> <span class="p">{</span> 
  <span class="nl">column-count</span><span class="p">:</span> <span class="m">4</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div></div> <p>上面的代码表示，当页面缩放时，列数固定，宽度可变。</p> <p>（3）添加列间距和分隔线。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">main</span> <span class="p">{</span> 
  <span class="nl">column-gap</span><span class="p">:</span> <span class="m">2em</span><span class="p">;</span> 
  <span class="nl">column-rule</span><span class="p">:</span> <span class="nb">thin</span> <span class="nb">dotted</span> <span class="m">#999</span><span class="p">;</span> 
  <span class="nl">column-width</span><span class="p">:</span> <span class="m">12em</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div></div> <p>上面的代码，用于给列间添加间距和分隔线。</p> <h3 id="52-断字">5.2 断字</h3> <p>（1）容器中的问题，默认一行显示，如果蚊子太长，超出了容器的长度，就会显示在容器外面。可以是同下面的样式，对文字进行<strong>换行</strong>处理。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">word-wrap</span><span class="o">:</span> <span class="nt">break-word</span><span class="o">;</span>
</code></pre></div></div> <p>（2）可以对文字<strong>截短</strong>处理，并且使得超出容器宽度的部分，显示为 <code class="language-plaintext highlighter-rouge">...</code>。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">p</span> <span class="p">{</span> 
 <span class="nl">width</span><span class="p">:</span> <span class="m">520px</span><span class="p">;</span> 
 <span class="nl">overflow</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span> 
 <span class="nl">text-overflow</span><span class="p">:</span> <span class="n">ellipsis</span><span class="p">;</span> 
 <span class="nl">white-space</span><span class="p">:</span> <span class="n">no-wrap</span><span class="p">;</span> 
<span class="p">}</span> 
</code></pre></div></div> <p>最后的 <code class="language-plaintext highlighter-rouge">white-space: nowrap</code> 声明是为了确保长出来的文本不会折行显示在外部元素中。</p> <h3 id="53-在-css-中创建分支">5.3 在 CSS 中创建分支</h3> <p>在响应式设计，经常会碰到某些设备不支持什么特性或技术的情况。此时，往往需要在 CSS 中创建一个分支。如果浏览器支持某特性，就应用一段代码；如果不支持，则应用另一段代码。这点类似于 JavaScript 中 <code class="language-plaintext highlighter-rouge">if...else</code> 语句。</p> <p>在 CSS 中创建分支有两种手段。一是完全基于 CSS，但支持的浏览器却不多； 二是借助 JavaScript 库，获得广泛兼容性。</p> <p>（1）特性查询</p> <p>CSS 原生的分支语法就是特性查询，比如下面的代码。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@supports</span> <span class="p">(</span><span class="n">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">)</span> <span class="p">{</span> 
  <span class="nc">.item</span> <span class="p">{</span> 
    <span class="nl">display</span><span class="p">:</span> <span class="n">inline-flex</span><span class="p">;</span> 
  <span class="p">}</span> 
<span class="p">}</span>

<span class="k">@supports</span> <span class="n">not</span> <span class="p">(</span><span class="n">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">)</span> <span class="p">{</span> 
  <span class="nc">.item</span> <span class="p">{</span> 
    <span class="nl">display</span><span class="p">:</span> <span class="n">inline-block</span><span class="p">;</span> 
  <span class="p">}</span> 
<span class="p">}</span> 
</code></pre></div></div> <p>上面的代码表示，如果浏览器支持 <code class="language-plaintext highlighter-rouge">display: flex</code>，就对 <code class="language-plaintext highlighter-rouge">.item</code> 选择器设置一种样式；否则，则设置为另一种样式。</p> <p>（2）组合条件</p> <p>假设我们只想在浏览器支持 flexbox 和 <code class="language-plaintext highlighter-rouge">pointer: coarse</code> 时应用某些规则，可以使用下面的代码。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@supports</span> <span class="p">((</span><span class="n">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">)</span> <span class="n">and</span> <span class="p">(</span><span class="nb">pointer</span><span class="p">:</span> <span class="n">coarse</span><span class="p">))</span> <span class="p">{</span> 
  <span class="nc">.item</span> <span class="p">{</span> 
    <span class="nl">display</span><span class="p">:</span> <span class="n">inline-flex</span><span class="p">;</span> 
  <span class="p">}</span> 
<span class="p">}</span> 
</code></pre></div></div> <p>上面的代码，使用 <code class="language-plaintext highlighter-rouge">and</code> 关键字，其他支持的关键字还有 <code class="language-plaintext highlighter-rouge">or</code>。比如，除了前面两个条件满足之外，如果浏览器支持 3D 变形也想应用样式，那么可以使用下面的代码。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@supports</span> <span class="p">((</span><span class="n">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">)</span> <span class="n">and</span> <span class="p">(</span><span class="nb">pointer</span><span class="p">:</span> <span class="n">coarse</span><span class="p">))</span> <span class="n">or</span> <span class="p">(</span><span class="n">transform</span><span class="p">:</span> <span class="n">translate3d</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">))</span> <span class="p">{</span> 
  <span class="nc">.item</span> <span class="p">{</span> 
    <span class="nl">display</span><span class="p">:</span> <span class="n">inline-flex</span><span class="p">;</span> 
  <span class="p">}</span> 
<span class="p">}</span> 
</code></pre></div></div> <p>注意，某些低版本及 IE 浏览器，并不支持 <code class="language-plaintext highlighter-rouge">@support</code> 关键字。</p> <p>（3）在 <code class="language-plaintext highlighter-rouge">@supports</code> 得到广泛支持以前，还可以使用 Modernizr 这个 JavaScript 工具在 CSS 中实现分支。</p> <h3 id="54-新的-css3-选择器">5.4 新的 CSS3 选择器</h3> <p>（1）属性选择器，用于对某些元素的属性进行选择。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">img</span><span class="o">[</span><span class="nt">alt</span><span class="o">]</span> <span class="p">{</span> 
  <span class="nl">border</span><span class="p">:</span> <span class="m">3px</span> <span class="nb">dashed</span> <span class="m">#e15f5f</span><span class="p">;</span> 
<span class="p">}</span> 
</code></pre></div></div> <p>上面的代码，表示选中任何包含 <code class="language-plaintext highlighter-rouge">alt</code> 属性的 <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> 元素。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">img</span><span class="o">[</span><span class="nt">alt</span><span class="o">=</span><span class="s1">"sausages"</span><span class="o">]</span> <span class="p">{</span> 
  <span class="c">/* 样式 */</span> 
<span class="p">}</span>
</code></pre></div></div> <p>上面的代码，只会选择 <code class="language-plaintext highlighter-rouge">alt</code> 属性值为 <code class="language-plaintext highlighter-rouge">sausages</code> 的 <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code>元素。即同时指定了属性的值，进一步缩小了搜索范围。</p> <p>CSS3 支持依据属性选择器包含的子字符串来选择元素。这时分为三种情况：</p> <ul> <li>以 xxx 开头。</li> <li>包含 xxx。</li> <li>以 xxx 结尾。</li> </ul> <p>（2）选中属性值以某字符串开头的元素。</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"img/ace-film.jpg"</span> <span class="na">alt=</span><span class="s">"film-ace"</span><span class="nt">&gt;</span> 
<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"img/rubbish-film.jpg"</span> <span class="na">alt=</span><span class="s">"film-rubbish"</span><span class="nt">&gt;</span> 
</code></pre></div></div> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">img</span><span class="o">[</span><span class="nt">alt</span><span class="o">^=</span><span class="s1">"film"</span><span class="o">]</span> <span class="p">{</span> 
  <span class="c">/* 样式 */</span> 
<span class="p">}</span> 
</code></pre></div></div> <p>上面的代码，使用 <code class="language-plaintext highlighter-rouge">^</code> 符号，匹配 <code class="language-plaintext highlighter-rouge">alt</code> 属性值中以 <code class="language-plaintext highlighter-rouge">film</code> 字符串开头的情况。即此时会选中 <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> 表情中，<code class="language-plaintext highlighter-rouge">alt</code> 属性以 <code class="language-plaintext highlighter-rouge">film</code> 开头的元素（在这里会同时选中上边的两个 <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> 标签）。</p> <p>（2）选中属性值包含某字符串的元素。</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p</span> <span class="na">data-ingredients=</span><span class="s">"scones cream jam"</span><span class="nt">&gt;</span>Will I get selected?<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span><span class="nt">data-ingredients</span><span class="o">*=</span><span class="s1">"cream"</span><span class="o">]</span> <span class="p">{</span> 
  <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span> 
<span class="p">}</span> 
</code></pre></div></div> <p>上面的属性选择器，使用 <code class="language-plaintext highlighter-rouge">*</code> 符号，匹配 <code class="language-plaintext highlighter-rouge">data-ingredients</code> 属性值中包含 <code class="language-plaintext highlighter-rouge">cream</code> 字符串的情况。此时 <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code> 标签会被选中。</p> <p>（3）选中属性值以某字符串结尾的元素。</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p</span> <span class="na">data-ingredients=</span><span class="s">"scones cream jam"</span><span class="nt">&gt;</span>Will I get selected?<span class="nt">&lt;/p&gt;</span> 
<span class="nt">&lt;p</span> <span class="na">data-ingredients=</span><span class="s">"toast jam butter"</span><span class="nt">&gt;</span>Will I get selected?<span class="nt">&lt;/p&gt;</span> 
<span class="nt">&lt;p</span> <span class="na">data-ingredients=</span><span class="s">"jam toast butter"</span><span class="nt">&gt;</span>Will I get selected?<span class="nt">&lt;/p&gt;</span> 
</code></pre></div></div> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span><span class="nt">data-ingredients</span><span class="err">$</span><span class="o">=</span><span class="s1">"jam"</span><span class="o">]</span> <span class="p">{</span> 
  <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span> 
<span class="p">}</span> 
</code></pre></div></div> <p>上面的属性选择器，使用 <code class="language-plaintext highlighter-rouge">$</code> 符号，匹配 <code class="language-plaintext highlighter-rouge">data-ingredients</code> 属性值中以 <code class="language-plaintext highlighter-rouge">jam</code> 字符串结尾的情况。此时，第一个 <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code> 标签会被选中。</p> <h3 id="55-伪类选择器">5.5 伪类选择器</h3> <ul> <li><code class="language-plaintext highlighter-rouge">:last-child</code>：用于选择某个父元素中的最后一个子元素。</li> <li><code class="language-plaintext highlighter-rouge">:nth-child(n)</code>：</li> <li><code class="language-plaintext highlighter-rouge">:nth-last-child(n)</code>：</li> <li><code class="language-plaintext highlighter-rouge">:nth-of-type(n)</code>：</li> <li><code class="language-plaintext highlighter-rouge">:nth-last-of-type(n)</code>：</li> <li><code class="language-plaintext highlighter-rouge">:not</code>：</li> <li><code class="language-plaintext highlighter-rouge">:empty</code>：</li> <li><code class="language-plaintext highlighter-rouge">:first-line</code>：</li> <li><code class="language-plaintext highlighter-rouge">:has</code>：</li> </ul> <h3 id="56-calc-函数">5.6 <code class="language-plaintext highlighter-rouge">calc()</code> 函数</h3> <h3 id="57-css3-的新颜色格式及透明度">5.7 CSS3 的新颜色格式及透明度</h3> <p>（1）可以使用 <code class="language-plaintext highlighter-rouge">rgb()</code> 或 <code class="language-plaintext highlighter-rouge">rgba()</code> 函数定义颜色，前者接收三个参数（取值为 0 ~ 255），分别表示红、绿、蓝三原色分量的值，后者除了这三个参数，还可以接受一个 alpha 透明度数值，取值为 0 ~ 1。</p> <p>（2）CSS3 还支持HSL（Hue Saturation Lightness，色相、饱和度、亮度）颜色系统。</p> <h2 id="六css3-高级技术">六、CSS3 高级技术</h2> <h2 id="七svg-与响应式-web-设计">七、SVG 与响应式 Web 设计</h2> <h2 id="八css3-过渡变形和动画">八、CSS3 过渡、变形和动画</h2> <h2 id="九表单">九、表单</h2>]]></content><author><name></name></author><category term="frontend"/><category term="css"/><category term="media queries"/><category term="responsive web design"/><summary type="html"><![CDATA[本文是对 Ben Frain 的《响应式 Web 设计：HTML5和CSS3实战 - 第二版》的读书摘要。]]></summary></entry><entry><title type="html">计算机网络 - 网络层</title><link href="https://feng-zhang0712.github.io//blog/2024/network-layer/" rel="alternate" type="text/html" title="计算机网络 - 网络层"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/network-layer</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/network-layer/"><![CDATA[]]></content><author><name></name></author><category term="computer"/><category term="computer"/><category term="networks"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">CSS Modules 用法教程</title><link href="https://feng-zhang0712.github.io//blog/2024/css-modules/" rel="alternate" type="text/html" title="CSS Modules 用法教程"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/css-modules</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/css-modules/"><![CDATA[<p><a href="https://www.ruanyifeng.com/blog/2016/06/css_modules.html">CSS Modules 用法教程</a></p>]]></content><author><name></name></author><category term="frontend"/><category term="css"/><category term="css modules"/><summary type="html"><![CDATA[CSS Modules 用法教程]]></summary></entry><entry><title type="html">CSS 预处理器</title><link href="https://feng-zhang0712.github.io//blog/2024/css-preprocessor/" rel="alternate" type="text/html" title="CSS 预处理器"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/css-preprocessor</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/css-preprocessor/"><![CDATA[<h2 id="一概念">一、概念</h2> <p>CSS 预处理器是一种脚本语言，扩展了原生 CSS 的功能。通过预处理器，可以使用更高级的语法和特性来编写样式代码。预处理器文件（如 .sass）在编译过程中会被转换成标准的 CSS 文件。</p> <h2 id="二常见的-css-预处理器">二、常见的 CSS 预处理器</h2> <p>Sass：提供了两种语法，Sass（缩进语法）和 SCSS（类似 CSS 的语法）。Sass 是目前最流行的预处理器之一。 LESS：另一个流行的预处理器，语法上与 CSS 更接近，容易上手。</p> <h2 id="三预处理器的用途和优点">三、预处理器的用途和优点</h2> <h3 id="31-变量">3.1 变量</h3> <p>预处理器支持变量，可以用来存储重复使用的值（如颜色）等。</p> <h3 id="32-嵌套">3.2 嵌套</h3> <p>预处理器允许嵌套 CSS，可以更清晰地表示层次结构。</p> <h3 id="33-混合宏mixin">3.3. 混合宏（Mixin）</h3> <p>混合宏允许定义一组可重用的样式规则，类似于函数。可以通过传递参数自定义样式。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@mixin</span> <span class="n">border-radius</span><span class="p">(</span><span class="err">$</span><span class="n">radius</span><span class="p">)</span> <span class="p">{</span>
  <span class="nl">-webkit-border-radius</span><span class="p">:</span> <span class="err">$</span><span class="n">radius</span><span class="p">;</span>
     <span class="nl">-moz-border-radius</span><span class="p">:</span> <span class="err">$</span><span class="n">radius</span><span class="p">;</span>
          <span class="nl">border-radius</span><span class="p">:</span> <span class="err">$</span><span class="n">radius</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.button</span> <span class="p">{</span>
  <span class="err">@include</span> <span class="err">border-radius(10px);</span>
<span class="p">}</span>

</code></pre></div></div> <h3 id="34-继承">3.4 继承</h3> <p>预处理器支持继承样式，一个选择器可以继承另一个选择器的样式。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="nt">button-styles</span> <span class="p">{</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">10px</span> <span class="m">20px</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.button</span> <span class="p">{</span>
  <span class="err">@extend</span> <span class="err">%button-styles;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#3498db</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.button-secondary</span> <span class="p">{</span>
  <span class="err">@extend</span> <span class="err">%button-styles;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#2ecc71</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="35-函数">3.5 函数</h3> <p>预处理器允许定义函数，进行复杂的计算和逻辑操作，然后返回值，供样式规则使用。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@function</span> <span class="n">calculate-margin</span><span class="p">(</span><span class="err">$</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">@return</span> <span class="err">$</span><span class="n">value</span> <span class="err">*</span> <span class="m">1.5</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="n">calculate-margin</span><span class="p">(</span><span class="m">10px</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="36-导入和拆分文件">3.6 导入和拆分文件</h3> <p>预处理器支持将样式拆分成多个文件，并使用 @import 语句导入。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* _variables.scss */</span>
<span class="err">$</span><span class="nt">primary-color</span><span class="o">:</span> <span class="err">#3498</span><span class="nt">db</span><span class="o">;</span>
<span class="err">$</span><span class="nt">secondary-color</span><span class="o">:</span> <span class="err">#2</span><span class="nt">ecc71</span><span class="o">;</span>

<span class="c">/* _mixins.scss */</span>
<span class="k">@mixin</span> <span class="n">flex-center</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* styles.scss */</span>
<span class="k">@import</span> <span class="s2">'variables'</span><span class="p">;</span>
<span class="k">@import</span> <span class="s2">'mixins'</span><span class="p">;</span>
<span class="nc">.header</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="err">$</span><span class="n">primary-color</span><span class="p">;</span>
  <span class="err">@include</span> <span class="err">flex-center;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100vh</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="37-条件语句和循环">3.7 条件语句和循环</h3> <p>预处理器支持条件语句和循环。</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span><span class="nt">themes</span><span class="o">:</span> <span class="o">(</span><span class="s2">'light'</span><span class="o">,</span> <span class="s2">'dark'</span><span class="o">);</span>
<span class="k">@each</span> <span class="err">$</span><span class="n">theme</span> <span class="n">in</span> <span class="err">$</span><span class="n">themes</span> <span class="p">{</span>
  <span class="nc">.theme-</span><span class="err">#</span><span class="p">{</span><span class="err">$theme</span><span class="p">}</span> <span class="p">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="n">if</span><span class="p">(</span><span class="err">$</span><span class="n">theme</span> <span class="err">==</span> <span class="s2">'light'</span><span class="p">,</span> <span class="m">#fff</span><span class="p">,</span> <span class="m">#333</span><span class="p">);</span>
    <span class="nl">color</span><span class="p">:</span> <span class="n">if</span><span class="p">(</span><span class="err">$</span><span class="n">theme</span> <span class="err">==</span> <span class="s2">'light'</span><span class="p">,</span> <span class="m">#333</span><span class="p">,</span> <span class="m">#fff</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="frontend"/><category term="css"/><category term="sass"/><summary type="html"><![CDATA[一、概念]]></summary></entry><entry><title type="html">React 中的事件</title><link href="https://feng-zhang0712.github.io//blog/2024/events-in-react/" rel="alternate" type="text/html" title="React 中的事件"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/events-in-react</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/events-in-react/"><![CDATA[<p>React 的事件代理机制（Event Delegation）是其性能优化的一种手段。通过事件代理，React 将所有的事件监听器统一绑定到根元素，而不是每个具体的 DOM 元素上。这种方法减少了实际绑定到 DOM 元素上的事件处理器数量，从而提升了性能，特别是在有大量动态生成的元素时。</p> <h3 id="事件代理的工作原理">事件代理的工作原理</h3> <ol> <li><strong>统一绑定事件处理器</strong>：React 会在组件挂载时，将所有事件处理器统一绑定到应用的根元素（例如 <code class="language-plaintext highlighter-rouge">document</code> 或 <code class="language-plaintext highlighter-rouge">root</code> DOM 节点）。</li> <li><strong>事件捕获和冒泡</strong>：当用户在具体的 DOM 元素上触发事件时，事件会按照捕获和冒泡的机制传播。React 利用这个机制，在事件冒泡到根元素时捕获事件。</li> <li><strong>事件分发</strong>：在根元素上捕获到事件后，React 解析事件的目标元素，并根据目标元素和事件类型，找到对应的 React 组件实例和事件处理器，然后调用该处理器。</li> </ol> <h3 id="优点">优点</h3> <ul> <li><strong>性能优化</strong>：减少了实际绑定在 DOM 元素上的事件处理器数量，降低了内存消耗和性能开销。</li> <li><strong>简化事件管理</strong>：通过统一的事件处理机制，简化了事件添加和移除的管理。</li> </ul> <h3 id="示例">示例</h3> <p>以下是一个简单的示例，展示了事件代理的基本概念：</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">ButtonList</span> <span class="kd">extends</span> <span class="nc">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 获取被点击的按钮元素</span>
    <span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Button </span><span class="p">${</span><span class="nx">button</span><span class="p">.</span><span class="nx">textContent</span><span class="p">}</span><span class="s2"> clicked!`</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="nf">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>Button 1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>Button 2<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>Button 3<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ButtonList</span><span class="p">;</span>
</code></pre></div></div> <p>在这个示例中，三个按钮的点击事件都通过 <code class="language-plaintext highlighter-rouge">div</code> 容器上的 <code class="language-plaintext highlighter-rouge">onClick</code> 处理器进行处理。点击任意按钮时，事件会冒泡到 <code class="language-plaintext highlighter-rouge">div</code> 容器，被捕获并处理。</p> <h3 id="深入理解">深入理解</h3> <ul> <li><strong>合成事件</strong>：React 使用合成事件（Synthetic Events）对象来封装浏览器的原生事件对象。合成事件对象提供了与原生事件对象相同的接口，但具备跨浏览器的兼容性。</li> <li><strong>事件池</strong>：React 维护一个事件池，用于存储和复用合成事件对象。事件处理器执行后，合成事件对象会被复用以提高性能。因此，在事件处理器中，不能异步访问合成事件对象；如果需要异步访问，可以调用 <code class="language-plaintext highlighter-rouge">event.persist()</code> 方法防止对象被复用。</li> </ul> <h3 id="注意事项">注意事项</h3> <ul> <li><strong>异步访问事件对象</strong>：在异步函数中访问合成事件对象时，需要调用 <code class="language-plaintext highlighter-rouge">event.persist()</code> 方法。例如：</li> </ul> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">handleClick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nf">persist</span><span class="p">();</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span> <span class="c1">// 异步访问事件对象</span>
  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div> <ul> <li><strong>非冒泡事件</strong>：某些事件不会冒泡，例如 <code class="language-plaintext highlighter-rouge">onBlur</code> 和 <code class="language-plaintext highlighter-rouge">onFocus</code>。React 通过特殊处理，将这些事件也通过事件代理机制进行处理。</li> </ul> <h3 id="总结">总结</h3> <p>React 的事件代理机制通过在根元素上统一绑定事件处理器，有效地减少了实际绑定在 DOM 元素上的事件处理器数量，提升了性能，并简化了事件管理。这是 React 提升性能和简化事件管理的一种重要手段。</p>]]></content><author><name></name></author><category term="frontend"/><category term="react"/><category term="events"/><summary type="html"><![CDATA[React 的事件代理机制（Event Delegation）是其性能优化的一种手段。通过事件代理，React 将所有的事件监听器统一绑定到根元素，而不是每个具体的 DOM 元素上。这种方法减少了实际绑定到 DOM 元素上的事件处理器数量，从而提升了性能，特别是在有大量动态生成的元素时。]]></summary></entry><entry><title type="html">ES6 - Array</title><link href="https://feng-zhang0712.github.io//blog/2024/array/" rel="alternate" type="text/html" title="ES6 - Array"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/array</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/array/"><![CDATA[]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">ES6 - async 函数</title><link href="https://feng-zhang0712.github.io//blog/2024/async/" rel="alternate" type="text/html" title="ES6 - async 函数"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/async</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/async/"><![CDATA[<h2 id="一含义">一、含义</h2> <p>ES2017 标准引入了 <code class="language-plaintext highlighter-rouge">async</code> 函数，它是 Generator 函数的语法糖。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">readFile</span> <span class="o">=</span> <span class="nf">function </span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nf">readFile</span><span class="p">(</span><span class="nx">fileName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="nf">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="nf">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">gen</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">f1</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/fstab</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">f2</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/shells</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f1</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f2</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
<span class="p">};</span>

<span class="c1">// 上面代码的函数 gen 可以写成 async 函数，就是下面这样。</span>
<span class="kd">const</span> <span class="nx">asyncReadFile</span> <span class="o">=</span> <span class="k">async</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">f1</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/fstab</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">f2</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/shells</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f1</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f2</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
<span class="p">};</span>
</code></pre></div></div> <p>比较发现，<code class="language-plaintext highlighter-rouge">async</code> 函数就是将 Generator 函数的星号（*）替换成 <code class="language-plaintext highlighter-rouge">async</code>，将 <code class="language-plaintext highlighter-rouge">yield</code> 替换成 <code class="language-plaintext highlighter-rouge">await</code>，仅此而已。<code class="language-plaintext highlighter-rouge">async</code> 函数对 Generator 函数的改进，体现在以下四点。</p> <p>（1）<strong>内置执行器</strong></p> <p>Generator 函数的执行必须靠执行器，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一样。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">asyncReadFile</span><span class="p">();</span>
</code></pre></div></div> <p>上面的代码调用了 asyncReadFile 函数，然后它就会自动执行。这不像 Generator 函数，需要调用 next 方法才能真正执行，得到最后结果。</p> <p>（2）<strong>更好的语义</strong></p> <p><code class="language-plaintext highlighter-rouge">async</code> 和 <code class="language-plaintext highlighter-rouge">await</code>，比起星号（<code class="language-plaintext highlighter-rouge">*</code>）和 <code class="language-plaintext highlighter-rouge">yield</code>，语义更清楚。<code class="language-plaintext highlighter-rouge">async</code> 表示函数里有异步操作，<code class="language-plaintext highlighter-rouge">await</code> 表示紧跟在后面的表达式需要等待结果。</p> <p>（3）<strong>更广的适用性</strong></p> <p>co 模块约定，<code class="language-plaintext highlighter-rouge">yield</code> 命令后面只能是 Thunk 函数或 Promise 对象，而 <code class="language-plaintext highlighter-rouge">async</code> 函数的 <code class="language-plaintext highlighter-rouge">await</code> 命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 <code class="language-plaintext highlighter-rouge">resolved</code> 的 Promise 对象）。</p> <p>（4）<strong>返回值是 Promise</strong></p> <p><code class="language-plaintext highlighter-rouge">async</code> 函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象更方便。</p> <h2 id="二语法">二、语法</h2> <h3 id="21-返回-promise-对象">2.1 返回 Promise 对象</h3> <p><code class="language-plaintext highlighter-rouge">async</code> 函数返回一个 Promise 对象。</p> <p><code class="language-plaintext highlighter-rouge">async</code> 函数内部 <code class="language-plaintext highlighter-rouge">return</code> 语句返回的值，会成为 <code class="language-plaintext highlighter-rouge">then</code> 方法回调函数的参数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">'</span><span class="s1">hello world</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">f</span><span class="p">().</span><span class="nf">then</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
<span class="c1">// "hello world"</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">async</code> 函数内部抛出错误，会导致返回的 Promise 对象变为 <code class="language-plaintext highlighter-rouge">reject</code> 状态。抛出的错误对象会被 <code class="language-plaintext highlighter-rouge">catch</code> 方法回调函数接收到。</p> <h3 id="22-promise-对象的状态变化">2.2 Promise 对象的状态变化</h3> <p>只有 <code class="language-plaintext highlighter-rouge">async</code> 函数内部的异步操作执行完，才会执行 <code class="language-plaintext highlighter-rouge">then</code> 方法指定的回调函数。</p> <h3 id="23-await-命令">2.3 await 命令</h3> <p>正常情况下，<code class="language-plaintext highlighter-rouge">await</code> 命令后面是一个 Promise 对象，返回该对象的结果。</p> <p>（1）如果 <code class="language-plaintext highlighter-rouge">await</code> 后面不是 Promise 对象，就直接返回对应的值。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// 等同于</span>
  <span class="c1">// return 123;</span>
  <span class="k">return</span> <span class="k">await</span> <span class="mi">123</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">f</span><span class="p">().</span><span class="nf">then</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span> <span class="c1">// 123</span>
</code></pre></div></div> <p>（2）如果 <code class="language-plaintext highlighter-rouge">await</code> 命令后面是一个 <code class="language-plaintext highlighter-rouge">thenable</code> 对象（即定义了 <code class="language-plaintext highlighter-rouge">then</code> 方法的对象），那么 <code class="language-plaintext highlighter-rouge">await</code> 会将其等同于 Promise 对象。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Sleep</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">timeout</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">timeout</span> <span class="o">=</span> <span class="nx">timeout</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nf">then</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">startTime</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
    <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">-</span> <span class="nx">startTime</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="nx">timeout</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">sleepTime</span> <span class="o">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nc">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">sleepTime</span><span class="p">);</span>
<span class="p">})();</span>
<span class="c1">// 1000</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">await</code> 命令后面是一个 Sleep 对象的实例。这个实例不是 Promise 对象，但是因为定义了 <code class="language-plaintext highlighter-rouge">then</code> 方法，<code class="language-plaintext highlighter-rouge">await</code> 会将其视为 Promise 处理。</p> <p>（3）借助 <code class="language-plaintext highlighter-rouge">await</code> 命令可以实现休眠功能。下面给出了一个简化的 sleep 实现。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">sleep</span><span class="p">(</span><span class="nx">interval</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">interval</span><span class="p">);</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="c1">// 用法</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">one2FiveInAsync</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
    <span class="k">await</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nf">one2FiveInAsync</span><span class="p">();</span>
</code></pre></div></div> <p>（4）当函数执行到 <code class="language-plaintext highlighter-rouge">await</code> 时，被等待的表达式会立即执行，所有依赖该表达式的值的代码会被暂停，并推送进微任务队列（microtask queue）。然后主线程被释放出来，用于事件循环中的下一个任务。即使等待的值是已经敲定的 promise 或不是 promise，也会发生这种情况。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">foo</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">);</span>
  <span class="k">await</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="dl">"</span><span class="s2">middle</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="dl">"</span><span class="s2">end</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">foo</span><span class="p">(</span><span class="dl">"</span><span class="s2">First</span><span class="dl">"</span><span class="p">);</span>
<span class="nf">foo</span><span class="p">(</span><span class="dl">"</span><span class="s2">Second</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// First start</span>
<span class="c1">// First middle</span>
<span class="c1">// Second start</span>
<span class="c1">// Second middle</span>
<span class="c1">// First end</span>
<span class="c1">// Second end</span>
</code></pre></div></div> <p>上面的代码，执行到 <code class="language-plaintext highlighter-rouge">await</code> 时，后面的代码会整体被安排进一个新的微任务，此后的函数体变为异步执行。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="nf">queueMicrotask</span><span class="p">(</span><span class="kd">function</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">microtask</span><span class="dl">"</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">queueMicrotask</span><span class="p">(</span><span class="nx">test</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">async function start</span><span class="dl">"</span><span class="p">);</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">await</span> <span class="kc">null</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">async function resume</span><span class="dl">"</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">await</span> <span class="kc">null</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">async function end</span><span class="dl">"</span><span class="p">);</span>
<span class="p">})();</span>

<span class="nf">queueMicrotask</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">queueMicrotask() after calling async function</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">script sync part end</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// async function start</span>
<span class="c1">// script sync part end</span>
<span class="c1">// microtask 1</span>
<span class="c1">// async function resume 1</span>
<span class="c1">// queueMicrotask() after calling async function</span>
<span class="c1">// microtask 2</span>
<span class="c1">// async function resume 2</span>
<span class="c1">// microtask 3</span>
<span class="c1">// async function end</span>
</code></pre></div></div> <p>上面的代码，<code class="language-plaintext highlighter-rouge">test</code> 方法总会在异步函数恢复执行前被调用，呈现轮流的调度。微任务被执行的顺序通常就是入队的先后顺序，而 <code class="language-plaintext highlighter-rouge">console.log("queueMicrotask() after calling async function");</code> 比 <code class="language-plaintext highlighter-rouge">await</code> 晚入队，因此 <code class="language-plaintext highlighter-rouge">"queueMicrotask() after calling async function"</code> 在异步函数第一次恢复之后才输出。</p> <h3 id="24-使用注意点">2.4 使用注意点</h3> <ul> <li><code class="language-plaintext highlighter-rouge">await</code> 命令只能用在 <code class="language-plaintext highlighter-rouge">async</code> 函数之中，如果用在普通函数，就会报错。</li> <li><code class="language-plaintext highlighter-rouge">for</code> 循环和数组的 <code class="language-plaintext highlighter-rouge">reduce</code> 方法支持 <code class="language-plaintext highlighter-rouge">async</code> 函数。</li> <li><code class="language-plaintext highlighter-rouge">async</code> 函数可以保留运行堆栈。</li> </ul> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">b</span><span class="p">().</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">c</span><span class="p">());</span>
<span class="p">};</span>
</code></pre></div></div> <p>上面代码中，函数 <code class="language-plaintext highlighter-rouge">a</code> 内部运行了一个异步任务 <code class="language-plaintext highlighter-rouge">b</code>。当 <code class="language-plaintext highlighter-rouge">b</code> 运行的时候，函数 <code class="language-plaintext highlighter-rouge">a</code> 不会中断，而是继续执行。等到 <code class="language-plaintext highlighter-rouge">b</code> 运行结束，可能 <code class="language-plaintext highlighter-rouge">a</code> 早就运行结束了，<code class="language-plaintext highlighter-rouge">b</code> 所在的上下文环境已经消失了。如果 <code class="language-plaintext highlighter-rouge">b</code> 或 <code class="language-plaintext highlighter-rouge">c</code> 报错，错误堆栈将不包括 <code class="language-plaintext highlighter-rouge">a</code>。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nf">b</span><span class="p">();</span>
  <span class="nf">c</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">b</code> 运行的时候，<code class="language-plaintext highlighter-rouge">a</code> 是暂停执行，上下文环境都保存着。一旦 <code class="language-plaintext highlighter-rouge">b</code> 或 <code class="language-plaintext highlighter-rouge">c</code> 报错，错误堆栈将包括 <code class="language-plaintext highlighter-rouge">a</code>。</p> <h2 id="三async-函数的实现原理">三、async 函数的实现原理</h2> <p><code class="language-plaintext highlighter-rouge">async</code> 函数的实现原理，就是将 <strong>Generator 函数</strong>和<strong>自动执行器</strong>，包装在一个函数里。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">fn</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="c1">// 等同于</span>
<span class="kd">function</span> <span class="nf">fn</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">spawn</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div> <p>所有的 <code class="language-plaintext highlighter-rouge">async</code> 函数都可以写成上面的第二种形式，其中的 <code class="language-plaintext highlighter-rouge">spawn</code> 函数就是自动执行器。</p> <p>下面是 <code class="language-plaintext highlighter-rouge">spawn</code> 函数的实现，基本就是前文自动执行器的翻版。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">spawn</span><span class="p">(</span><span class="nx">genF</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nf">genF</span><span class="p">();</span>
    <span class="kd">function</span> <span class="nf">step</span><span class="p">(</span><span class="nx">nextF</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">next</span><span class="p">;</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="nx">next</span> <span class="o">=</span> <span class="nf">nextF</span><span class="p">();</span>
      <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nf">reject</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nf">resolve</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">value</span><span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">step</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
        <span class="p">});</span>
      <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">step</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">gen</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
        <span class="p">});</span>
      <span class="p">});</span>
    <span class="p">}</span>
    <span class="nf">step</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="四顶层-await">四、顶层 await</h2> <p>从 ES2022 开始，允许在模块的顶层独立使用 <code class="language-plaintext highlighter-rouge">await</code> 命令。它的主要目的是使用 <code class="language-plaintext highlighter-rouge">await</code> 解决模块异步加载的问题。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// awaiting.js</span>
<span class="kd">const</span> <span class="nx">dynamic</span> <span class="o">=</span> <span class="k">import</span><span class="p">(</span><span class="nx">someMission</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nf">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">output</span> <span class="o">=</span> <span class="nf">someProcess</span><span class="p">((</span><span class="k">await</span> <span class="nx">dynamic</span><span class="p">).</span><span class="k">default</span><span class="p">,</span> <span class="k">await</span> <span class="nx">data</span><span class="p">);</span>
</code></pre></div></div> <p>上面代码中，两个异步操作在输出的时候，都加上了 <code class="language-plaintext highlighter-rouge">await</code> 命令。只有等到异步操作完成，这个模块才会输出值。加载这个模块的写法如下。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// usage.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">output</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./awaiting.js</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">function</span> <span class="nf">outputPlusValue</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">output</span> <span class="o">+</span> <span class="nx">value</span> <span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">outputPlusValue</span><span class="p">(</span><span class="mi">100</span><span class="p">));</span>
</code></pre></div></div> <p>注意，顶层 <code class="language-plaintext highlighter-rouge">await</code> 只能用在 ES6 模块，不能用在 CommonJS 模块。这是因为 CommonJS 模块的 <code class="language-plaintext highlighter-rouge">require()</code> 是同步加载，如果有顶层 <code class="language-plaintext highlighter-rouge">await</code>，就没法处理加载了。</p> <h2 id="六参考">六、参考</h2> <ul> <li>阮一峰，<a href="https://es6.ruanyifeng.com/#docs/async">async 函数</a></li> <li>MDN，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await">await</a></li> </ul>]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[一、含义]]></summary></entry><entry><title type="html">ES6 - Class</title><link href="https://feng-zhang0712.github.io//blog/2024/class/" rel="alternate" type="text/html" title="ES6 - Class"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/class</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/class/"><![CDATA[<h2 id="一class-的基本语法">一、Class 的基本语法</h2> <h3 id="11-类的由来">1.1 类的由来</h3> <p>ES6 引入了 Class（类）的概念，通过 <code class="language-plaintext highlighter-rouge">class</code> 关键字，可以定义类。</p> <p>（1）ES6 的类，可以看作构造函数的另一种写法。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="k">typeof</span> <span class="nx">Point</span> <span class="c1">// "function"</span>
<span class="nx">Point</span> <span class="o">===</span> <span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="kd">constructor</span> <span class="c1">// true</span>
</code></pre></div></div> <p>上面代码表明，类的数据类型就是函数，类本身就指向构造函数。</p> <p>（2）类的所有方法都定义在类的 <code class="language-plaintext highlighter-rouge">prototype</code> 属性上面。因此，在类的实例上面调用方法，其实就是调用原型上的方法。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
  <span class="nf">toString</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
  <span class="nf">toValue</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 等同于</span>
<span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">()</span> <span class="p">{},</span>
  <span class="nf">toString</span><span class="p">()</span> <span class="p">{},</span>
  <span class="nf">toValue</span><span class="p">()</span> <span class="p">{},</span>
<span class="p">};</span>
</code></pre></div></div> <p>（3）<code class="language-plaintext highlighter-rouge">prototype</code> 对象的 <code class="language-plaintext highlighter-rouge">constructor</code> 属性，直接指向“类”的本身，这与 ES5 的行为是一致的。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Point</span> <span class="c1">// true</span>
</code></pre></div></div> <p>（4）类的内部所有定义的方法，都是不可枚举的（non-enumerable）。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
  <span class="nf">toString</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nb">Object</span><span class="p">.</span><span class="nf">keys</span><span class="p">(</span><span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
<span class="c1">// []</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">getOwnPropertyNames</span><span class="p">(</span><span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
<span class="c1">// ["constructor","toString"]</span>
</code></pre></div></div> <h3 id="12-constructor-方法">1.2 constructor() 方法</h3> <p><code class="language-plaintext highlighter-rouge">constructor</code> 方法是类的默认方法，通过 <code class="language-plaintext highlighter-rouge">new</code> 命令生成对象实例时，自动调用该方法。一个类必须有 <code class="language-plaintext highlighter-rouge">constructor</code> 方法，如果没有显式定义，一个空的 <code class="language-plaintext highlighter-rouge">constructor</code> 方法会被默认添加。</p> <h3 id="13-类的实例">1.3 类的实例</h3> <p>类的属性和方法，除非显式定义在其本身（即定义在 this 对象上），否则都是定义在原型上（即定义在 class 上）。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nf">toString</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">'</span><span class="s1">(</span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">, </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">)</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">point</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>

<span class="nx">point</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span> <span class="c1">// (2, 3)</span>

<span class="nx">point</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// true</span>
<span class="nx">point</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">y</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// true</span>
<span class="nx">point</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">toString</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// false</span>
<span class="nx">point</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">toString</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// true</span>
</code></pre></div></div> <h3 id="14-实例属性的新写法">1.4 实例属性的新写法</h3> <p>ES2022 规定，实例属性除了可以定义在 <code class="language-plaintext highlighter-rouge">constructor</code> 方法里面的 <code class="language-plaintext highlighter-rouge">this</code> 上面，也可以定义在类内部的最顶层。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">IncreasingCounter</span> <span class="p">{</span>
  <span class="nx">_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">get</span> <span class="nf">value</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Getting the current value!</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_count</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_count</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码中，实例属性 <code class="language-plaintext highlighter-rouge">_count</code> 与取值函数 <code class="language-plaintext highlighter-rouge">value</code> 方法和 <code class="language-plaintext highlighter-rouge">increment</code> 方法，处于同一个层级。这时，不需要在实例属性前面加上 <code class="language-plaintext highlighter-rouge">this</code>。</p> <p>注意，新写法定义的属性是实例对象自身的属性，而不是定义在实例对象的原型上面。</p> <h3 id="15-取值函数getter和存值函数setter">1.5 取值函数（getter）和存值函数（setter）</h3> <p>类的内部可以使用 <code class="language-plaintext highlighter-rouge">get</code> 和 <code class="language-plaintext highlighter-rouge">set</code> 关键字，对某个属性设置存值函数和取值函数。他们设置在属性的 Descriptor 对象上。</p> <h3 id="16-属性表达式">1.6 属性表达式</h3> <p>类的属性名，可以采用表达式。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">methodName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">getArea</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">Square</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
  <span class="p">[</span><span class="nx">methodName</span><span class="p">]()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="17-静态方法">1.7 静态方法</h3> <p>（1）如果静态方法包含 <code class="language-plaintext highlighter-rouge">this</code> 关键字，这个 <code class="language-plaintext highlighter-rouge">this</code> 指的是类，而不是实例。</p> <p>（2）父类的静态方法，可以被子类继承。</p> <p>（3）静态方法可以从 <code class="language-plaintext highlighter-rouge">super</code> 对象上调用。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Foo</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nf">classMethod</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Bar</span> <span class="kd">extends</span> <span class="nc">Foo</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nf">classMethod</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="nf">classMethod</span><span class="p">()</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">, too</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">Bar</span><span class="p">.</span><span class="nf">classMethod</span><span class="p">()</span> <span class="c1">// "hello, too"</span>
</code></pre></div></div> <h3 id="18-静态属性">1.8 静态属性</h3> <p>在实例属性的前面，加上 <code class="language-plaintext highlighter-rouge">static</code> 关键字，就表示静态属性。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">myStaticProp</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="19-私有方法和私有属性">1.9 私有方法和私有属性</h3> <p>ES2022 为 <code class="language-plaintext highlighter-rouge">class</code> 添加了私有属性，方法是在属性名之前使用 <code class="language-plaintext highlighter-rouge">#</code> 表示。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">IncreasingCounter</span> <span class="p">{</span>
  <span class="err">#</span><span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">get</span> <span class="nf">value</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Getting the current value!</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">count</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">count</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">#count</code> 就是私有属性，只能在类的内部使用 <code class="language-plaintext highlighter-rouge">this.#count</code>。如果在类的外部使用，就会报错。</p> <p>这种写法还可以用来写私有方法。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Foo</span> <span class="p">{</span>
  <span class="err">#</span><span class="nx">a</span><span class="p">;</span>
  <span class="err">#</span><span class="nx">b</span><span class="p">;</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="err">#</span><span class="nf">sum</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">a</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">b</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>私有属性也可以设置 <code class="language-plaintext highlighter-rouge">getter</code> 和 <code class="language-plaintext highlighter-rouge">setter</code> 方法。</p> <p>ES2022 改进了 <code class="language-plaintext highlighter-rouge">in</code> 运算符，使它也可以用来判断私有属性，此时，<code class="language-plaintext highlighter-rouge">in</code> 只能用在类的内部。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">C</span> <span class="p">{</span>
  <span class="err">#</span><span class="nx">brand</span><span class="p">;</span>

  <span class="kd">static</span> <span class="nf">isC</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="err">#</span><span class="nx">brand</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 私有属性 #brand 存在</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// 私有属性 #foo 不存在</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="110-静态块">1.10 静态块</h3> <p>ES2022 引入了静态块（static block），允许在类的内部设置一个代码块，在类生成时运行且只运行一次，主要作用是对静态属性进行初始化。以后，新建类的实例时，这个块就不运行了。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">C</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="111-类的注意点">1.11 类的注意点</h3> <h4 id="1严格模式">（1）严格模式</h4> <p>类和模块的内部，默认是严格模式。</p> <h4 id="2不存在提升">（2）不存在提升</h4> <p>类不存在变量提升，这也就意味着，ES6 不会把类的声明提升到代码头部。</p> <h4 id="3name-属性">（3）name 属性</h4> <p>ES6 的类是 ES5 的构造函数的一层包装，所以函数的许多特性都被 Class 继承，包括 <code class="language-plaintext highlighter-rouge">name</code> 属性。<code class="language-plaintext highlighter-rouge">name</code> 属性总是返回紧跟在 <code class="language-plaintext highlighter-rouge">class</code> 关键字后面的类名。</p> <h4 id="4this-的指向">（4）this 的指向</h4> <p>类的方法内部如果含有 <code class="language-plaintext highlighter-rouge">this</code>，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Logger</span> <span class="p">{</span>
  <span class="nf">printName</span><span class="p">(</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">there</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nf">print</span><span class="p">(</span><span class="s2">`Hello </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nf">print</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Logger</span><span class="p">();</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">printName</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">logger</span><span class="p">;</span>
<span class="nf">printName</span><span class="p">();</span> <span class="c1">// TypeError: Cannot read property 'print' of undefined</span>
</code></pre></div></div> <p>解决办法是，在构造方法中对 <code class="language-plaintext highlighter-rouge">this</code> 进行绑定，或者使用箭头函数。</p> <h3 id="112-newtarget-属性">1.12 new.target 属性</h3> <p>ES6 引入了 <code class="language-plaintext highlighter-rouge">new.target</code> 属性，该属性一般用在构造函数之中，返回 <code class="language-plaintext highlighter-rouge">new</code> 命令作用于的那个构造函数。如果构造函数不是通过 <code class="language-plaintext highlighter-rouge">new</code> 命令或 <code class="language-plaintext highlighter-rouge">Reflect.construct</code> 方法调用的，<code class="language-plaintext highlighter-rouge">new.target</code> 会 返回 <code class="language-plaintext highlighter-rouge">undefined</code>，因此这个属性可以用来确定构造函数是怎么调用的。</p> <p>（1）Class 内部调用 <code class="language-plaintext highlighter-rouge">new.target</code>，返回当前 Class。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Rectangle</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">new</span><span class="p">.</span><span class="nx">target</span> <span class="o">===</span> <span class="nx">Rectangle</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Rectangle</span><span class="p">();</span> <span class="c1">// 输出 true</span>
</code></pre></div></div> <p>（2）子类继承父类时，<code class="language-plaintext highlighter-rouge">new.target</code> 会返回子类。利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Shape</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="k">new</span><span class="p">.</span><span class="nx">target</span> <span class="o">===</span> <span class="nx">Shape</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">本类不能实例化</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nc">Rectangle</span> <span class="kd">extends</span> <span class="nc">Shape</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">length</span><span class="p">,</span> <span class="nx">width</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">();</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Shape</span><span class="p">();</span>  <span class="c1">// 报错</span>
<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Rectangle</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>  <span class="c1">// 正确</span>
</code></pre></div></div> <p>上面代码中，Shape 类不能被实例化，只能用于继承。</p> <p>（3）在函数外部，使用 <code class="language-plaintext highlighter-rouge">new.target</code> 会报错。</p> <h2 id="二class-的继承">二、Class 的继承</h2> <h3 id="21-简介">2.1 简介</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="22-私有属性和私有方法的继承">2.2 私有属性和私有方法的继承</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="23-静态属性和静态方法的继承">2.3 静态属性和静态方法的继承</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="24-objectgetprototypeof">2.4 Object.getPrototypeOf()</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="25-super-关键字">2.5 super 关键字</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="26-类的-prototype-属性和-proto-属性">2.6 类的 prototype 属性和 <strong>proto</strong> 属性</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="27-原生构造函数的继承">2.7 原生构造函数的继承</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="28-mixin-模式的实现">2.8 Mixin 模式的实现</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h2 id="三参考">三、参考</h2> <ul> <li>阮一峰，<a href="https://es6.ruanyifeng.com/#docs/class">Class 的基本语法</a></li> <li>阮一峰，<a href="https://es6.ruanyifeng.com/#docs/class-extends">Class 的继承</a></li> </ul>]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[一、Class 的基本语法]]></summary></entry></feed>