<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://feng-zhang0712.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://feng-zhang0712.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-13T03:43:58+00:00</updated><id>https://feng-zhang0712.github.io//feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">计算机网络 - 网络层</title><link href="https://feng-zhang0712.github.io//blog/2024/network-layer/" rel="alternate" type="text/html" title="计算机网络 - 网络层"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/network-layer</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/network-layer/"><![CDATA[]]></content><author><name></name></author><category term="computer"/><category term="computer"/><category term="networks"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Events In React</title><link href="https://feng-zhang0712.github.io//blog/2024/events-in-react/" rel="alternate" type="text/html" title="Events In React"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/events-in-react</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/events-in-react/"><![CDATA[<p>React 的事件代理机制（Event Delegation）是其性能优化的一种手段。通过事件代理，React 将所有的事件监听器统一绑定到根元素，而不是每个具体的 DOM 元素上。这种方法减少了实际绑定到 DOM 元素上的事件处理器数量，从而提升了性能，特别是在有大量动态生成的元素时。</p> <h3 id="事件代理的工作原理">事件代理的工作原理</h3> <ol> <li><strong>统一绑定事件处理器</strong>：React 会在组件挂载时，将所有事件处理器统一绑定到应用的根元素（例如 <code class="language-plaintext highlighter-rouge">document</code> 或 <code class="language-plaintext highlighter-rouge">root</code> DOM 节点）。</li> <li><strong>事件捕获和冒泡</strong>：当用户在具体的 DOM 元素上触发事件时，事件会按照捕获和冒泡的机制传播。React 利用这个机制，在事件冒泡到根元素时捕获事件。</li> <li><strong>事件分发</strong>：在根元素上捕获到事件后，React 解析事件的目标元素，并根据目标元素和事件类型，找到对应的 React 组件实例和事件处理器，然后调用该处理器。</li> </ol> <h3 id="优点">优点</h3> <ul> <li><strong>性能优化</strong>：减少了实际绑定在 DOM 元素上的事件处理器数量，降低了内存消耗和性能开销。</li> <li><strong>简化事件管理</strong>：通过统一的事件处理机制，简化了事件添加和移除的管理。</li> </ul> <h3 id="示例">示例</h3> <p>以下是一个简单的示例，展示了事件代理的基本概念：</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">ButtonList</span> <span class="kd">extends</span> <span class="nc">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 获取被点击的按钮元素</span>
    <span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Button </span><span class="p">${</span><span class="nx">button</span><span class="p">.</span><span class="nx">textContent</span><span class="p">}</span><span class="s2"> clicked!`</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="nf">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>Button 1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>Button 2<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>Button 3<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ButtonList</span><span class="p">;</span>
</code></pre></div></div> <p>在这个示例中，三个按钮的点击事件都通过 <code class="language-plaintext highlighter-rouge">div</code> 容器上的 <code class="language-plaintext highlighter-rouge">onClick</code> 处理器进行处理。点击任意按钮时，事件会冒泡到 <code class="language-plaintext highlighter-rouge">div</code> 容器，被捕获并处理。</p> <h3 id="深入理解">深入理解</h3> <ul> <li><strong>合成事件</strong>：React 使用合成事件（Synthetic Events）对象来封装浏览器的原生事件对象。合成事件对象提供了与原生事件对象相同的接口，但具备跨浏览器的兼容性。</li> <li><strong>事件池</strong>：React 维护一个事件池，用于存储和复用合成事件对象。事件处理器执行后，合成事件对象会被复用以提高性能。因此，在事件处理器中，不能异步访问合成事件对象；如果需要异步访问，可以调用 <code class="language-plaintext highlighter-rouge">event.persist()</code> 方法防止对象被复用。</li> </ul> <h3 id="注意事项">注意事项</h3> <ul> <li><strong>异步访问事件对象</strong>：在异步函数中访问合成事件对象时，需要调用 <code class="language-plaintext highlighter-rouge">event.persist()</code> 方法。例如：</li> </ul> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">handleClick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nf">persist</span><span class="p">();</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span> <span class="c1">// 异步访问事件对象</span>
  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div> <ul> <li><strong>非冒泡事件</strong>：某些事件不会冒泡，例如 <code class="language-plaintext highlighter-rouge">onBlur</code> 和 <code class="language-plaintext highlighter-rouge">onFocus</code>。React 通过特殊处理，将这些事件也通过事件代理机制进行处理。</li> </ul> <h3 id="总结">总结</h3> <p>React 的事件代理机制通过在根元素上统一绑定事件处理器，有效地减少了实际绑定在 DOM 元素上的事件处理器数量，提升了性能，并简化了事件管理。这是 React 提升性能和简化事件管理的一种重要手段。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[React 的事件代理机制（Event Delegation）是其性能优化的一种手段。通过事件代理，React 将所有的事件监听器统一绑定到根元素，而不是每个具体的 DOM 元素上。这种方法减少了实际绑定到 DOM 元素上的事件处理器数量，从而提升了性能，特别是在有大量动态生成的元素时。]]></summary></entry><entry><title type="html">ES6 - Array</title><link href="https://feng-zhang0712.github.io//blog/2024/array/" rel="alternate" type="text/html" title="ES6 - Array"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/array</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/array/"><![CDATA[]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">ES6 - async 函数</title><link href="https://feng-zhang0712.github.io//blog/2024/async/" rel="alternate" type="text/html" title="ES6 - async 函数"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/async</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/async/"><![CDATA[<h2 id="一含义">一、含义</h2> <p>ES2017 标准引入了 <code class="language-plaintext highlighter-rouge">async</code> 函数，它是 Generator 函数的语法糖。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">readFile</span> <span class="o">=</span> <span class="nf">function </span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nf">readFile</span><span class="p">(</span><span class="nx">fileName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="nf">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="nf">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">gen</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">f1</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/fstab</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">f2</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/shells</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f1</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f2</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
<span class="p">};</span>

<span class="c1">// 上面代码的函数 gen 可以写成 async 函数，就是下面这样。</span>
<span class="kd">const</span> <span class="nx">asyncReadFile</span> <span class="o">=</span> <span class="k">async</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">f1</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/fstab</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">f2</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/shells</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f1</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f2</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
<span class="p">};</span>
</code></pre></div></div> <p>比较发现，<code class="language-plaintext highlighter-rouge">async</code> 函数就是将 Generator 函数的星号（*）替换成 <code class="language-plaintext highlighter-rouge">async</code>，将 <code class="language-plaintext highlighter-rouge">yield</code> 替换成 <code class="language-plaintext highlighter-rouge">await</code>，仅此而已。<code class="language-plaintext highlighter-rouge">async</code> 函数对 Generator 函数的改进，体现在以下四点。</p> <p>（1）<strong>内置执行器</strong></p> <p>Generator 函数的执行必须靠执行器，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一样。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">asyncReadFile</span><span class="p">();</span>
</code></pre></div></div> <p>上面的代码调用了 asyncReadFile 函数，然后它就会自动执行。这不像 Generator 函数，需要调用 next 方法才能真正执行，得到最后结果。</p> <p>（2）<strong>更好的语义</strong></p> <p><code class="language-plaintext highlighter-rouge">async</code> 和 <code class="language-plaintext highlighter-rouge">await</code>，比起星号（<code class="language-plaintext highlighter-rouge">*</code>）和 <code class="language-plaintext highlighter-rouge">yield</code>，语义更清楚。<code class="language-plaintext highlighter-rouge">async</code> 表示函数里有异步操作，<code class="language-plaintext highlighter-rouge">await</code> 表示紧跟在后面的表达式需要等待结果。</p> <p>（3）<strong>更广的适用性</strong></p> <p>co 模块约定，<code class="language-plaintext highlighter-rouge">yield</code> 命令后面只能是 Thunk 函数或 Promise 对象，而 <code class="language-plaintext highlighter-rouge">async</code> 函数的 <code class="language-plaintext highlighter-rouge">await</code> 命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 <code class="language-plaintext highlighter-rouge">resolved</code> 的 Promise 对象）。</p> <p>（4）<strong>返回值是 Promise</strong></p> <p><code class="language-plaintext highlighter-rouge">async</code> 函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象更方便。</p> <h2 id="二语法">二、语法</h2> <h3 id="21-返回-promise-对象">2.1 返回 Promise 对象</h3> <p><code class="language-plaintext highlighter-rouge">async</code> 函数返回一个 Promise 对象。</p> <p><code class="language-plaintext highlighter-rouge">async</code> 函数内部 <code class="language-plaintext highlighter-rouge">return</code> 语句返回的值，会成为 <code class="language-plaintext highlighter-rouge">then</code> 方法回调函数的参数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">'</span><span class="s1">hello world</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">f</span><span class="p">().</span><span class="nf">then</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
<span class="c1">// "hello world"</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">async</code> 函数内部抛出错误，会导致返回的 Promise 对象变为 <code class="language-plaintext highlighter-rouge">reject</code> 状态。抛出的错误对象会被 <code class="language-plaintext highlighter-rouge">catch</code> 方法回调函数接收到。</p> <h3 id="22-promise-对象的状态变化">2.2 Promise 对象的状态变化</h3> <p>只有 <code class="language-plaintext highlighter-rouge">async</code> 函数内部的异步操作执行完，才会执行 <code class="language-plaintext highlighter-rouge">then</code> 方法指定的回调函数。</p> <h3 id="23-await-命令">2.3 await 命令</h3> <p>正常情况下，<code class="language-plaintext highlighter-rouge">await</code> 命令后面是一个 Promise 对象，返回该对象的结果。</p> <p>（1）如果 <code class="language-plaintext highlighter-rouge">await</code> 后面不是 Promise 对象，就直接返回对应的值。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// 等同于</span>
  <span class="c1">// return 123;</span>
  <span class="k">return</span> <span class="k">await</span> <span class="mi">123</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">f</span><span class="p">().</span><span class="nf">then</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span> <span class="c1">// 123</span>
</code></pre></div></div> <p>（2）如果 <code class="language-plaintext highlighter-rouge">await</code> 命令后面是一个 <code class="language-plaintext highlighter-rouge">thenable</code> 对象（即定义了 <code class="language-plaintext highlighter-rouge">then</code> 方法的对象），那么 <code class="language-plaintext highlighter-rouge">await</code> 会将其等同于 Promise 对象。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Sleep</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">timeout</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">timeout</span> <span class="o">=</span> <span class="nx">timeout</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nf">then</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">startTime</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
    <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">-</span> <span class="nx">startTime</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="nx">timeout</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">sleepTime</span> <span class="o">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nc">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">sleepTime</span><span class="p">);</span>
<span class="p">})();</span>
<span class="c1">// 1000</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">await</code> 命令后面是一个 Sleep 对象的实例。这个实例不是 Promise 对象，但是因为定义了 <code class="language-plaintext highlighter-rouge">then</code> 方法，<code class="language-plaintext highlighter-rouge">await</code> 会将其视为 Promise 处理。</p> <p>（3）借助 <code class="language-plaintext highlighter-rouge">await</code> 命令可以实现休眠功能。下面给出了一个简化的 sleep 实现。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">sleep</span><span class="p">(</span><span class="nx">interval</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">interval</span><span class="p">);</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="c1">// 用法</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">one2FiveInAsync</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
    <span class="k">await</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nf">one2FiveInAsync</span><span class="p">();</span>
</code></pre></div></div> <p>（4）当函数执行到 <code class="language-plaintext highlighter-rouge">await</code> 时，被等待的表达式会立即执行，所有依赖该表达式的值的代码会被暂停，并推送进微任务队列（microtask queue）。然后主线程被释放出来，用于事件循环中的下一个任务。即使等待的值是已经敲定的 promise 或不是 promise，也会发生这种情况。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">foo</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">);</span>
  <span class="k">await</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="dl">"</span><span class="s2">middle</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="dl">"</span><span class="s2">end</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">foo</span><span class="p">(</span><span class="dl">"</span><span class="s2">First</span><span class="dl">"</span><span class="p">);</span>
<span class="nf">foo</span><span class="p">(</span><span class="dl">"</span><span class="s2">Second</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// First start</span>
<span class="c1">// First middle</span>
<span class="c1">// Second start</span>
<span class="c1">// Second middle</span>
<span class="c1">// First end</span>
<span class="c1">// Second end</span>
</code></pre></div></div> <p>上面的代码，执行到 <code class="language-plaintext highlighter-rouge">await</code> 时，后面的代码会整体被安排进一个新的微任务，此后的函数体变为异步执行。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="nf">queueMicrotask</span><span class="p">(</span><span class="kd">function</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">microtask</span><span class="dl">"</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">queueMicrotask</span><span class="p">(</span><span class="nx">test</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">async function start</span><span class="dl">"</span><span class="p">);</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">await</span> <span class="kc">null</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">async function resume</span><span class="dl">"</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">await</span> <span class="kc">null</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">async function end</span><span class="dl">"</span><span class="p">);</span>
<span class="p">})();</span>

<span class="nf">queueMicrotask</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">queueMicrotask() after calling async function</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">script sync part end</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// async function start</span>
<span class="c1">// script sync part end</span>
<span class="c1">// microtask 1</span>
<span class="c1">// async function resume 1</span>
<span class="c1">// queueMicrotask() after calling async function</span>
<span class="c1">// microtask 2</span>
<span class="c1">// async function resume 2</span>
<span class="c1">// microtask 3</span>
<span class="c1">// async function end</span>
</code></pre></div></div> <p>上面的代码，<code class="language-plaintext highlighter-rouge">test</code> 方法总会在异步函数恢复执行前被调用，呈现轮流的调度。微任务被执行的顺序通常就是入队的先后顺序，而 <code class="language-plaintext highlighter-rouge">console.log("queueMicrotask() after calling async function");</code> 比 <code class="language-plaintext highlighter-rouge">await</code> 晚入队，因此 <code class="language-plaintext highlighter-rouge">"queueMicrotask() after calling async function"</code> 在异步函数第一次恢复之后才输出。</p> <h3 id="24-使用注意点">2.4 使用注意点</h3> <ul> <li><code class="language-plaintext highlighter-rouge">await</code> 命令只能用在 <code class="language-plaintext highlighter-rouge">async</code> 函数之中，如果用在普通函数，就会报错。</li> <li><code class="language-plaintext highlighter-rouge">for</code> 循环和数组的 <code class="language-plaintext highlighter-rouge">reduce</code> 方法支持 <code class="language-plaintext highlighter-rouge">async</code> 函数。</li> <li><code class="language-plaintext highlighter-rouge">async</code> 函数可以保留运行堆栈。</li> </ul> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">b</span><span class="p">().</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">c</span><span class="p">());</span>
<span class="p">};</span>
</code></pre></div></div> <p>上面代码中，函数 <code class="language-plaintext highlighter-rouge">a</code> 内部运行了一个异步任务 <code class="language-plaintext highlighter-rouge">b</code>。当 <code class="language-plaintext highlighter-rouge">b</code> 运行的时候，函数 <code class="language-plaintext highlighter-rouge">a</code> 不会中断，而是继续执行。等到 <code class="language-plaintext highlighter-rouge">b</code> 运行结束，可能 <code class="language-plaintext highlighter-rouge">a</code> 早就运行结束了，<code class="language-plaintext highlighter-rouge">b</code> 所在的上下文环境已经消失了。如果 <code class="language-plaintext highlighter-rouge">b</code> 或 <code class="language-plaintext highlighter-rouge">c</code> 报错，错误堆栈将不包括 <code class="language-plaintext highlighter-rouge">a</code>。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nf">b</span><span class="p">();</span>
  <span class="nf">c</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">b</code> 运行的时候，<code class="language-plaintext highlighter-rouge">a</code> 是暂停执行，上下文环境都保存着。一旦 <code class="language-plaintext highlighter-rouge">b</code> 或 <code class="language-plaintext highlighter-rouge">c</code> 报错，错误堆栈将包括 <code class="language-plaintext highlighter-rouge">a</code>。</p> <h2 id="三async-函数的实现原理">三、async 函数的实现原理</h2> <p><code class="language-plaintext highlighter-rouge">async</code> 函数的实现原理，就是将 <strong>Generator 函数</strong>和<strong>自动执行器</strong>，包装在一个函数里。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">fn</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="c1">// 等同于</span>
<span class="kd">function</span> <span class="nf">fn</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">spawn</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div> <p>所有的 <code class="language-plaintext highlighter-rouge">async</code> 函数都可以写成上面的第二种形式，其中的 <code class="language-plaintext highlighter-rouge">spawn</code> 函数就是自动执行器。</p> <p>下面是 <code class="language-plaintext highlighter-rouge">spawn</code> 函数的实现，基本就是前文自动执行器的翻版。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">spawn</span><span class="p">(</span><span class="nx">genF</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nf">genF</span><span class="p">();</span>
    <span class="kd">function</span> <span class="nf">step</span><span class="p">(</span><span class="nx">nextF</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">next</span><span class="p">;</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="nx">next</span> <span class="o">=</span> <span class="nf">nextF</span><span class="p">();</span>
      <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nf">reject</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nf">resolve</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">value</span><span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">step</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
        <span class="p">});</span>
      <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">step</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">gen</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
        <span class="p">});</span>
      <span class="p">});</span>
    <span class="p">}</span>
    <span class="nf">step</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="四顶层-await">四、顶层 await</h2> <p>从 ES2022 开始，允许在模块的顶层独立使用 <code class="language-plaintext highlighter-rouge">await</code> 命令。它的主要目的是使用 <code class="language-plaintext highlighter-rouge">await</code> 解决模块异步加载的问题。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// awaiting.js</span>
<span class="kd">const</span> <span class="nx">dynamic</span> <span class="o">=</span> <span class="k">import</span><span class="p">(</span><span class="nx">someMission</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nf">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">output</span> <span class="o">=</span> <span class="nf">someProcess</span><span class="p">((</span><span class="k">await</span> <span class="nx">dynamic</span><span class="p">).</span><span class="k">default</span><span class="p">,</span> <span class="k">await</span> <span class="nx">data</span><span class="p">);</span>
</code></pre></div></div> <p>上面代码中，两个异步操作在输出的时候，都加上了 <code class="language-plaintext highlighter-rouge">await</code> 命令。只有等到异步操作完成，这个模块才会输出值。加载这个模块的写法如下。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// usage.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">output</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./awaiting.js</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">function</span> <span class="nf">outputPlusValue</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">output</span> <span class="o">+</span> <span class="nx">value</span> <span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">outputPlusValue</span><span class="p">(</span><span class="mi">100</span><span class="p">));</span>
</code></pre></div></div> <p>注意，顶层 <code class="language-plaintext highlighter-rouge">await</code> 只能用在 ES6 模块，不能用在 CommonJS 模块。这是因为 CommonJS 模块的 <code class="language-plaintext highlighter-rouge">require()</code> 是同步加载，如果有顶层 <code class="language-plaintext highlighter-rouge">await</code>，就没法处理加载了。</p> <h2 id="六参考">六、参考</h2> <ul> <li>阮一峰，<a href="https://es6.ruanyifeng.com/#docs/async">async 函数</a></li> <li>MDN，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await">await</a></li> </ul>]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[一、含义]]></summary></entry><entry><title type="html">ES6 - Class</title><link href="https://feng-zhang0712.github.io//blog/2024/class/" rel="alternate" type="text/html" title="ES6 - Class"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/class</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/class/"><![CDATA[<h2 id="一class-的基本语法">一、Class 的基本语法</h2> <h3 id="11-类的由来">1.1 类的由来</h3> <p>ES6 引入了 Class（类）的概念，通过 <code class="language-plaintext highlighter-rouge">class</code> 关键字，可以定义类。</p> <p>（1）ES6 的类，可以看作构造函数的另一种写法。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="k">typeof</span> <span class="nx">Point</span> <span class="c1">// "function"</span>
<span class="nx">Point</span> <span class="o">===</span> <span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="kd">constructor</span> <span class="c1">// true</span>
</code></pre></div></div> <p>上面代码表明，类的数据类型就是函数，类本身就指向构造函数。</p> <p>（2）类的所有方法都定义在类的 <code class="language-plaintext highlighter-rouge">prototype</code> 属性上面。因此，在类的实例上面调用方法，其实就是调用原型上的方法。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
  <span class="nf">toString</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
  <span class="nf">toValue</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 等同于</span>
<span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">()</span> <span class="p">{},</span>
  <span class="nf">toString</span><span class="p">()</span> <span class="p">{},</span>
  <span class="nf">toValue</span><span class="p">()</span> <span class="p">{},</span>
<span class="p">};</span>
</code></pre></div></div> <p>（3）<code class="language-plaintext highlighter-rouge">prototype</code> 对象的 <code class="language-plaintext highlighter-rouge">constructor</code> 属性，直接指向“类”的本身，这与 ES5 的行为是一致的。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Point</span> <span class="c1">// true</span>
</code></pre></div></div> <p>（4）类的内部所有定义的方法，都是不可枚举的（non-enumerable）。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
  <span class="nf">toString</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nb">Object</span><span class="p">.</span><span class="nf">keys</span><span class="p">(</span><span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
<span class="c1">// []</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">getOwnPropertyNames</span><span class="p">(</span><span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
<span class="c1">// ["constructor","toString"]</span>
</code></pre></div></div> <h3 id="12-constructor-方法">1.2 constructor() 方法</h3> <p><code class="language-plaintext highlighter-rouge">constructor</code> 方法是类的默认方法，通过 <code class="language-plaintext highlighter-rouge">new</code> 命令生成对象实例时，自动调用该方法。一个类必须有 <code class="language-plaintext highlighter-rouge">constructor</code> 方法，如果没有显式定义，一个空的 <code class="language-plaintext highlighter-rouge">constructor</code> 方法会被默认添加。</p> <h3 id="13-类的实例">1.3 类的实例</h3> <p>类的属性和方法，除非显式定义在其本身（即定义在 this 对象上），否则都是定义在原型上（即定义在 class 上）。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nf">toString</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">'</span><span class="s1">(</span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">, </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">)</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">point</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>

<span class="nx">point</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span> <span class="c1">// (2, 3)</span>

<span class="nx">point</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// true</span>
<span class="nx">point</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">y</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// true</span>
<span class="nx">point</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">toString</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// false</span>
<span class="nx">point</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">toString</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// true</span>
</code></pre></div></div> <h3 id="14-实例属性的新写法">1.4 实例属性的新写法</h3> <p>ES2022 规定，实例属性除了可以定义在 <code class="language-plaintext highlighter-rouge">constructor</code> 方法里面的 <code class="language-plaintext highlighter-rouge">this</code> 上面，也可以定义在类内部的最顶层。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">IncreasingCounter</span> <span class="p">{</span>
  <span class="nx">_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">get</span> <span class="nf">value</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Getting the current value!</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_count</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_count</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码中，实例属性 <code class="language-plaintext highlighter-rouge">_count</code> 与取值函数 <code class="language-plaintext highlighter-rouge">value</code> 方法和 <code class="language-plaintext highlighter-rouge">increment</code> 方法，处于同一个层级。这时，不需要在实例属性前面加上 <code class="language-plaintext highlighter-rouge">this</code>。</p> <p>注意，新写法定义的属性是实例对象自身的属性，而不是定义在实例对象的原型上面。</p> <h3 id="15-取值函数getter和存值函数setter">1.5 取值函数（getter）和存值函数（setter）</h3> <p>类的内部可以使用 <code class="language-plaintext highlighter-rouge">get</code> 和 <code class="language-plaintext highlighter-rouge">set</code> 关键字，对某个属性设置存值函数和取值函数。他们设置在属性的 Descriptor 对象上。</p> <h3 id="16-属性表达式">1.6 属性表达式</h3> <p>类的属性名，可以采用表达式。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">methodName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">getArea</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">Square</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
  <span class="p">[</span><span class="nx">methodName</span><span class="p">]()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="17-静态方法">1.7 静态方法</h3> <p>（1）如果静态方法包含 <code class="language-plaintext highlighter-rouge">this</code> 关键字，这个 <code class="language-plaintext highlighter-rouge">this</code> 指的是类，而不是实例。</p> <p>（2）父类的静态方法，可以被子类继承。</p> <p>（3）静态方法可以从 <code class="language-plaintext highlighter-rouge">super</code> 对象上调用。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Foo</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nf">classMethod</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Bar</span> <span class="kd">extends</span> <span class="nc">Foo</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nf">classMethod</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="nf">classMethod</span><span class="p">()</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">, too</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">Bar</span><span class="p">.</span><span class="nf">classMethod</span><span class="p">()</span> <span class="c1">// "hello, too"</span>
</code></pre></div></div> <h3 id="18-静态属性">1.8 静态属性</h3> <p>在实例属性的前面，加上 <code class="language-plaintext highlighter-rouge">static</code> 关键字，就表示静态属性。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">myStaticProp</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="19-私有方法和私有属性">1.9 私有方法和私有属性</h3> <p>ES2022 为 <code class="language-plaintext highlighter-rouge">class</code> 添加了私有属性，方法是在属性名之前使用 <code class="language-plaintext highlighter-rouge">#</code> 表示。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">IncreasingCounter</span> <span class="p">{</span>
  <span class="err">#</span><span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">get</span> <span class="nf">value</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Getting the current value!</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">count</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">count</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">#count</code> 就是私有属性，只能在类的内部使用 <code class="language-plaintext highlighter-rouge">this.#count</code>。如果在类的外部使用，就会报错。</p> <p>这种写法还可以用来写私有方法。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Foo</span> <span class="p">{</span>
  <span class="err">#</span><span class="nx">a</span><span class="p">;</span>
  <span class="err">#</span><span class="nx">b</span><span class="p">;</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="err">#</span><span class="nf">sum</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">a</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">b</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>私有属性也可以设置 <code class="language-plaintext highlighter-rouge">getter</code> 和 <code class="language-plaintext highlighter-rouge">setter</code> 方法。</p> <p>ES2022 改进了 <code class="language-plaintext highlighter-rouge">in</code> 运算符，使它也可以用来判断私有属性，此时，<code class="language-plaintext highlighter-rouge">in</code> 只能用在类的内部。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">C</span> <span class="p">{</span>
  <span class="err">#</span><span class="nx">brand</span><span class="p">;</span>

  <span class="kd">static</span> <span class="nf">isC</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="err">#</span><span class="nx">brand</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 私有属性 #brand 存在</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// 私有属性 #foo 不存在</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="110-静态块">1.10 静态块</h3> <p>ES2022 引入了静态块（static block），允许在类的内部设置一个代码块，在类生成时运行且只运行一次，主要作用是对静态属性进行初始化。以后，新建类的实例时，这个块就不运行了。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">C</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="111-类的注意点">1.11 类的注意点</h3> <h4 id="1严格模式">（1）严格模式</h4> <p>类和模块的内部，默认是严格模式。</p> <h4 id="2不存在提升">（2）不存在提升</h4> <p>类不存在变量提升，这也就意味着，ES6 不会把类的声明提升到代码头部。</p> <h4 id="3name-属性">（3）name 属性</h4> <p>ES6 的类是 ES5 的构造函数的一层包装，所以函数的许多特性都被 Class 继承，包括 <code class="language-plaintext highlighter-rouge">name</code> 属性。<code class="language-plaintext highlighter-rouge">name</code> 属性总是返回紧跟在 <code class="language-plaintext highlighter-rouge">class</code> 关键字后面的类名。</p> <h4 id="4this-的指向">（4）this 的指向</h4> <p>类的方法内部如果含有 <code class="language-plaintext highlighter-rouge">this</code>，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Logger</span> <span class="p">{</span>
  <span class="nf">printName</span><span class="p">(</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">there</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nf">print</span><span class="p">(</span><span class="s2">`Hello </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nf">print</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Logger</span><span class="p">();</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">printName</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">logger</span><span class="p">;</span>
<span class="nf">printName</span><span class="p">();</span> <span class="c1">// TypeError: Cannot read property 'print' of undefined</span>
</code></pre></div></div> <p>解决办法是，在构造方法中对 <code class="language-plaintext highlighter-rouge">this</code> 进行绑定，或者使用箭头函数。</p> <h3 id="112-newtarget-属性">1.12 new.target 属性</h3> <p>ES6 引入了 <code class="language-plaintext highlighter-rouge">new.target</code> 属性，该属性一般用在构造函数之中，返回 <code class="language-plaintext highlighter-rouge">new</code> 命令作用于的那个构造函数。如果构造函数不是通过 <code class="language-plaintext highlighter-rouge">new</code> 命令或 <code class="language-plaintext highlighter-rouge">Reflect.construct</code> 方法调用的，<code class="language-plaintext highlighter-rouge">new.target</code> 会 返回 <code class="language-plaintext highlighter-rouge">undefined</code>，因此这个属性可以用来确定构造函数是怎么调用的。</p> <p>（1）Class 内部调用 <code class="language-plaintext highlighter-rouge">new.target</code>，返回当前 Class。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Rectangle</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">new</span><span class="p">.</span><span class="nx">target</span> <span class="o">===</span> <span class="nx">Rectangle</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Rectangle</span><span class="p">();</span> <span class="c1">// 输出 true</span>
</code></pre></div></div> <p>（2）子类继承父类时，<code class="language-plaintext highlighter-rouge">new.target</code> 会返回子类。利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Shape</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="k">new</span><span class="p">.</span><span class="nx">target</span> <span class="o">===</span> <span class="nx">Shape</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">本类不能实例化</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nc">Rectangle</span> <span class="kd">extends</span> <span class="nc">Shape</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">length</span><span class="p">,</span> <span class="nx">width</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">();</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Shape</span><span class="p">();</span>  <span class="c1">// 报错</span>
<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Rectangle</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>  <span class="c1">// 正确</span>
</code></pre></div></div> <p>上面代码中，Shape 类不能被实例化，只能用于继承。</p> <p>（3）在函数外部，使用 <code class="language-plaintext highlighter-rouge">new.target</code> 会报错。</p> <h2 id="二class-的继承">二、Class 的继承</h2> <h3 id="21-简介">2.1 简介</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="22-私有属性和私有方法的继承">2.2 私有属性和私有方法的继承</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="23-静态属性和静态方法的继承">2.3 静态属性和静态方法的继承</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="24-objectgetprototypeof">2.4 Object.getPrototypeOf()</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="25-super-关键字">2.5 super 关键字</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="26-类的-prototype-属性和-proto-属性">2.6 类的 prototype 属性和 <strong>proto</strong> 属性</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="27-原生构造函数的继承">2.7 原生构造函数的继承</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h3 id="28-mixin-模式的实现">2.8 Mixin 模式的实现</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <h2 id="三参考">三、参考</h2> <ul> <li>阮一峰，<a href="https://es6.ruanyifeng.com/#docs/class">Class 的基本语法</a></li> <li>阮一峰，<a href="https://es6.ruanyifeng.com/#docs/class-extends">Class 的继承</a></li> </ul>]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[一、Class 的基本语法]]></summary></entry><entry><title type="html">ES6 - Decorator</title><link href="https://feng-zhang0712.github.io//blog/2024/decorator/" rel="alternate" type="text/html" title="ES6 - Decorator"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/decorator</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/decorator/"><![CDATA[<p>ES6 中的装饰器（Decorator）是一种用于修改类和类方法行为的语法糖。装饰器提供了一种方便的方式来添加注释或元数据，或者在实际定义时修改类和类方法。需要注意的是，尽管装饰器的提案已经达到第2阶段（Stage 2），但它们尚未成为正式的 ECMAScript 标准。</p> <h2 id="一装饰器的定义和基本用法">一、装饰器的定义和基本用法</h2> <h3 id="1-定义">1. 定义</h3> <p>装饰器是一个函数，用于修改类的行为。它可以应用于类、类的方法、访问器（getter/setter）、属性、以及方法参数。</p> <h3 id="2-使用场景">2. 使用场景</h3> <p>装饰器常用于日志记录、访问控制、性能监控、依赖注入等场景。</p> <h3 id="3-基本语法">3. 基本语法</h3> <p>装饰器通过在类或类成员之前加 <code class="language-plaintext highlighter-rouge">@</code> 标志来调用。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">readonly</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">descriptor</span><span class="p">.</span><span class="nx">writable</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">descriptor</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">readonly</span>
  <span class="nf">getName</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Alice</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nf">getName</span><span class="p">());</span> <span class="c1">// 输出 "Alice"</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="dl">'</span><span class="s1">Bob</span><span class="dl">'</span><span class="p">;</span> <span class="p">};</span> <span class="c1">// 抛出错误，因为 getName 是只读的</span>
</code></pre></div></div> <h2 id="二装饰器的参数">二、装饰器的参数</h2> <p>装饰器函数通常接受以下参数：</p> <ul> <li><code class="language-plaintext highlighter-rouge">target</code>：装饰的目标（类的原型对象或类的构造函数）</li> <li><code class="language-plaintext highlighter-rouge">key</code>：装饰的属性名称</li> <li><code class="language-plaintext highlighter-rouge">descriptor</code>：属性描述符</li> </ul> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">log</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">originalMethod</span> <span class="o">=</span> <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
  <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Calling </span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2"> with arguments: </span><span class="p">${</span><span class="nx">args</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">originalMethod</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">descriptor</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Calculator</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">log</span>
  <span class="nf">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Calculator</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">calculator</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span> <span class="c1">// 输出 "Calling add with arguments: 2,3" 和 5</span>
</code></pre></div></div> <h2 id="三装饰器的类型">三、装饰器的类型</h2> <h3 id="1-类装饰器">1. 类装饰器</h3> <p>类装饰器用于类的定义，可以修改或替换类的构造函数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">sealed</span><span class="p">(</span><span class="kd">constructor</span><span class="p">)</span> <span class="p">{</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nf">seal</span><span class="p">(</span><span class="kd">constructor</span><span class="p">);</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nf">seal</span><span class="p">(</span><span class="kd">constructor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">sealed</span>
<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="2-方法装饰器">2. 方法装饰器</h3> <p>方法装饰器用于类的方法，可以修改方法的属性描述符。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">enumerable</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">descriptor</span><span class="p">.</span><span class="nx">enumerable</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">enumerable</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
  <span class="nf">getName</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="3-访问器装饰器">3. 访问器装饰器</h3> <p>访问器装饰器用于类的访问器（getter/setter）。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">configurable</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">descriptor</span><span class="p">.</span><span class="nx">configurable</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">configurable</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
  <span class="kd">get</span> <span class="nf">name</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">set</span> <span class="nf">name</span><span class="p">(</span><span class="nx">newName</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">=</span> <span class="nx">newName</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="4-属性装饰器">4. 属性装饰器</h3> <p>属性装饰器用于类的属性。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">readonly</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">descriptor</span><span class="p">.</span><span class="nx">writable</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">descriptor</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">readonly</span>
  <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Alice</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="5-参数装饰器">5. 参数装饰器</h3> <p>参数装饰器用于类方法的参数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">logParameter</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">metadataKey</span> <span class="o">=</span> <span class="s2">`log_</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2">_parameters`</span><span class="p">;</span>
  <span class="k">if </span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nf">isArray</span><span class="p">(</span><span class="nx">target</span><span class="p">[</span><span class="nx">metadataKey</span><span class="p">]))</span> <span class="p">{</span>
    <span class="nx">target</span><span class="p">[</span><span class="nx">metadataKey</span><span class="p">].</span><span class="nf">push</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">target</span><span class="p">[</span><span class="nx">metadataKey</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">index</span><span class="p">];</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">greet</span><span class="p">(@</span><span class="nd">logParameter</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="四装饰器的实际使用场景">四、装饰器的实际使用场景</h2> <h3 id="1-日志记录">1. 日志记录</h3> <p>使用装饰器记录方法调用的日志。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">log</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">originalMethod</span> <span class="o">=</span> <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
  <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Calling </span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2"> with arguments: </span><span class="p">${</span><span class="nx">args</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">originalMethod</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">descriptor</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">log</span>
  <span class="nf">sayHello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nf">sayHello</span><span class="p">(</span><span class="dl">'</span><span class="s1">Alice</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// 输出日志并返回 "Hello, Alice"</span>
</code></pre></div></div> <h3 id="2-权限控制">2. 权限控制</h3> <p>使用装饰器检查用户权限。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">checkPermission</span><span class="p">(</span><span class="nx">role</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">originalMethod</span> <span class="o">=</span> <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
    <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">userRole</span> <span class="o">!==</span> <span class="nx">role</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Permission denied</span><span class="dl">'</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="nx">originalMethod</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">return</span> <span class="nx">descriptor</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">role</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">userRole</span> <span class="o">=</span> <span class="nx">role</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">checkPermission</span><span class="p">(</span><span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">)</span>
  <span class="nf">deleteUser</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">User deleted</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">admin</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="p">(</span><span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">admin</span><span class="p">.</span><span class="nf">deleteUser</span><span class="p">();</span> <span class="c1">// 输出 "User deleted"</span>

<span class="kd">const</span> <span class="nx">guest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="p">(</span><span class="dl">'</span><span class="s1">guest</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">guest</span><span class="p">.</span><span class="nf">deleteUser</span><span class="p">();</span> <span class="c1">// 抛出 "Permission denied"</span>
</code></pre></div></div> <h3 id="3-性能监控">3. 性能监控</h3> <p>使用装饰器监控方法的执行时间。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">time</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">originalMethod</span> <span class="o">=</span> <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
  <span class="nx">descriptor</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">originalMethod</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">end</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2"> took </span><span class="p">${(</span><span class="nx">end</span> <span class="o">-</span> <span class="nx">start</span><span class="p">).</span><span class="nf">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">)}</span><span class="s2"> ms`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">descriptor</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Calculator</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">time</span>
  <span class="nf">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Calculator</span><span class="p">();</span>
<span class="nx">calculator</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// 输出执行时间</span>
</code></pre></div></div> <h2 id="五注意事项">五、注意事项</h2> <ol> <li><strong>装饰器的执行顺序</strong>：装饰器从下到上、从右到左执行。</li> <li><strong>兼容性</strong>：装饰器目前是实验特性，需要 Babel 或 TypeScript 等编译器的支持。</li> </ol>]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[ES6 中的装饰器（Decorator）是一种用于修改类和类方法行为的语法糖。装饰器提供了一种方便的方式来添加注释或元数据，或者在实际定义时修改类和类方法。需要注意的是，尽管装饰器的提案已经达到第2阶段（Stage 2），但它们尚未成为正式的 ECMAScript 标准。]]></summary></entry><entry><title type="html">ES6 - Function</title><link href="https://feng-zhang0712.github.io//blog/2024/function/" rel="alternate" type="text/html" title="ES6 - Function"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/function</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/function/"><![CDATA[]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">ES6 - Generator 函数</title><link href="https://feng-zhang0712.github.io//blog/2024/generator/" rel="alternate" type="text/html" title="ES6 - Generator 函数"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/generator</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/generator/"><![CDATA[<h2 id="一简介">一、简介</h2> <h3 id="11-基本概念">1.1 基本概念</h3> <p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。Generator 函数有多种理解角度。</p> <ul> <li><strong>状态机</strong>：语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。</li> <li><strong>遍历器对象生成函数</strong>：执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</li> </ul> <p>Generator 函数是一个普通函数，但是有两个特征。</p> <ul> <li>function 关键字与函数名之间有一个星号（<code class="language-plaintext highlighter-rouge">*</code>）。</li> <li>函数体内部使用 <code class="language-plaintext highlighter-rouge">yield</code> 表达式，定义不同的内部状态。</li> </ul> <p>Generator 函数的调用方法与普通函数一样，不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的遍历器对象（Iterator Object）。调用遍历器对象的 <code class="language-plaintext highlighter-rouge">next</code> 方法，指针移向下一个状态，直到遇到下一个 <code class="language-plaintext highlighter-rouge">yield</code> 表达式（或 <code class="language-plaintext highlighter-rouge">return</code> 语句）为止。换言之，Generator 函数是分段执行的，<code class="language-plaintext highlighter-rouge">yield</code> 表达式是暂停执行的标记，而 <code class="language-plaintext highlighter-rouge">next</code> 方法是恢复执行的标记。</p> <p>每次调用 <code class="language-plaintext highlighter-rouge">next</code> 方法都会返回一个对象，对象的 <code class="language-plaintext highlighter-rouge">value</code> 属性指向当前 <code class="language-plaintext highlighter-rouge">yield</code> 表达式后面的值，<code class="language-plaintext highlighter-rouge">done</code> 属性是一个布尔值，表示是否遍历完成。</p> <h3 id="12-yield-表达式">1.2 yield 表达式</h3> <p>遍历器对象的next方法的运行逻辑如下。</p> <p>（1）遇到 <code class="language-plaintext highlighter-rouge">yield</code> 表达式，就暂停执行后面的操作，并将紧跟在 <code class="language-plaintext highlighter-rouge">yield</code> 后面的那个表达式的值，作为返回的对象的 <code class="language-plaintext highlighter-rouge">value</code> 属性值。</p> <p>（2）下一次调用 <code class="language-plaintext highlighter-rouge">next</code> 方法时，再继续往下执行，直到遇到下一个 <code class="language-plaintext highlighter-rouge">yield</code> 表达式。</p> <p>（3）如果没有再遇到新的 <code class="language-plaintext highlighter-rouge">yield</code> 表达式，就一直运行到函数结束，直到 <code class="language-plaintext highlighter-rouge">return</code> 语句为止，并将 <code class="language-plaintext highlighter-rouge">return</code> 语句后面的表达式的值，作为返回的对象的 <code class="language-plaintext highlighter-rouge">value</code> 属性值。</p> <p>（4）如果该函数没有 <code class="language-plaintext highlighter-rouge">return</code> 语句，则返回的对象的 <code class="language-plaintext highlighter-rouge">value</code> 属性值为 <code class="language-plaintext highlighter-rouge">undefined</code>。</p> <p>注意，<code class="language-plaintext highlighter-rouge">yield</code> 表达式只能用在 Generator 函数里面，用在其他地方会报错。</p> <h3 id="13-与-iterator-接口的关系">1.3 与 Iterator 接口的关系</h3> <p>任意一个对象的 <code class="language-plaintext highlighter-rouge">Symbol.iterator</code> 方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。由于 Generator 函数就是遍历器生成函数，因此可以把 Generator 赋值给对象的 <code class="language-plaintext highlighter-rouge">Symbol.iterator</code> 属性，从而使得该对象具有 Iterator 接口。</p> <p>Generator 函数执行后返回的遍历器对象，也具有 <code class="language-plaintext highlighter-rouge">Symbol.iterator</code> 属性，执行后返回自身。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">gen</span><span class="p">(){</span>
  <span class="c1">// some code</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">gen</span><span class="p">();</span>

<span class="nx">g</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]()</span> <span class="o">===</span> <span class="nx">g</span> <span class="c1">// true</span>
</code></pre></div></div> <h2 id="二next-方法的参数">二、next 方法的参数</h2> <p>next 方法可以带一个参数，该参数会被当作上一个 yield 表达式的返回值。Generator 函数从暂停状态到恢复运行，它的上下文状态（context）是不变的。通过 next 方法的参数，就有办法在 Generator 函数开始运行之后，继续向函数体内部注入值，从而调整函数行为。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="k">yield </span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
  <span class="kd">var</span> <span class="nx">z</span> <span class="o">=</span> <span class="k">yield </span><span class="p">(</span><span class="nx">y</span> <span class="o">/</span> <span class="mi">3</span><span class="p">);</span>
  <span class="k">return </span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="nx">z</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nf">foo</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="nx">a</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// Object{value:6, done:false}</span>
<span class="nx">a</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// Object{value:NaN, done:false}</span>
<span class="nx">a</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// Object{value:NaN, done:true}</span>
</code></pre></div></div> <p>上面代码中，第二次运行 <code class="language-plaintext highlighter-rouge">next</code> 方法的时候不带参数，导致 y 的值等于 2 * undefined（即 NaN），除以 3 以后还是 NaN，因此返回对象的 <code class="language-plaintext highlighter-rouge">value</code> 属性也等于 NaN。第三次运行 <code class="language-plaintext highlighter-rouge">next</code> 方法的时候不带参数，所以 z 等于 undefined，返回对象的 <code class="language-plaintext highlighter-rouge">value</code> 属性等于 5 + NaN + undefined，即 NaN。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nf">foo</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="nx">b</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// { value:6, done:false }</span>
<span class="nx">b</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="c1">// { value:8, done:false }</span>
<span class="nx">b</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="mi">13</span><span class="p">)</span> <span class="c1">// { value:42, done:true }</span>
</code></pre></div></div> <ul> <li>第一次调用 b 的 <code class="language-plaintext highlighter-rouge">next</code> 方法时，返回 x+1 的值6。</li> <li>第二次调用 <code class="language-plaintext highlighter-rouge">next</code> 方法，将上一次 <code class="language-plaintext highlighter-rouge">yield</code> 表达式的值设为12，因此 y 等于24，返回 y / 3 的值8。</li> <li>第三次调用 <code class="language-plaintext highlighter-rouge">next</code> 方法，将上一次 <code class="language-plaintext highlighter-rouge">yield</code> 表达式的值设为13，因此 z 等于13，这时 x 等于5，y 等于24，所以 <code class="language-plaintext highlighter-rouge">return</code> 语句的值等于42。</li> </ul> <p>注意，由于 <code class="language-plaintext highlighter-rouge">next</code> 方法的参数表示上一个 <code class="language-plaintext highlighter-rouge">yield</code> 表达式的返回值，所以在第一次使用 <code class="language-plaintext highlighter-rouge">next</code> 方法时，传递参数是无效的。</p> <h2 id="三forof-循环">三、for…of 循环</h2> <p><code class="language-plaintext highlighter-rouge">for...of</code> 循环可以自动遍历 Generator 函数运行时生成的 Iterator 对象，且此时不再需要调用 <code class="language-plaintext highlighter-rouge">next</code> 方法。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">yield</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">yield</span> <span class="mi">3</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">4</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">v</span> <span class="k">of</span> <span class="nf">foo</span><span class="p">())</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// 1 2 3</span>
</code></pre></div></div> <p>注意，一旦 <code class="language-plaintext highlighter-rouge">next</code> 方法的返回对象的 <code class="language-plaintext highlighter-rouge">done</code> 属性为 <code class="language-plaintext highlighter-rouge">true</code>，<code class="language-plaintext highlighter-rouge">for...of</code> 循环就会中止，<strong>且不包含该返回对象</strong>，所以上面代码的 <code class="language-plaintext highlighter-rouge">return</code> 语句返回的 4，不包括在 <code class="language-plaintext highlighter-rouge">for...of</code> 循环之中。</p> <p>原生的 JavaScript 对象没有遍历接口，无法使用 <code class="language-plaintext highlighter-rouge">for...of</code> 循环，可以通过 Generator 函数为它加上这个接口。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">objectEntries</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Reflect</span><span class="p">.</span><span class="nf">ownKeys</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">of</span> <span class="nx">keys</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]];</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Jane</span><span class="dl">'</span> <span class="p">};</span>

<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">]</span> <span class="k">of</span> <span class="nf">objectEntries</span><span class="p">(</span><span class="nx">obj</span><span class="p">))</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// name: Jane</span>
</code></pre></div></div> <p>上面代码中，对象 <code class="language-plaintext highlighter-rouge">obj</code> 原生不具备 Iterator 接口，无法用 <code class="language-plaintext highlighter-rouge">for...of</code> 遍历。这时，我们通过 Generator 函数 <code class="language-plaintext highlighter-rouge">objectEntries</code> 为它加上遍历器接口，就可以用 <code class="language-plaintext highlighter-rouge">for...of</code> 遍历了。</p> <p>加上遍历器接口的另一种写法是，将 Generator 函数加到对象的 <code class="language-plaintext highlighter-rouge">Symbol.iterator</code> 属性上面。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">objectEntries</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nf">keys</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">of</span> <span class="nx">keys</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="k">this</span><span class="p">[</span><span class="nx">key</span><span class="p">]];</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Jane</span><span class="dl">'</span> <span class="p">};</span>

<span class="nx">obj</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span> <span class="o">=</span> <span class="nx">objectEntries</span><span class="p">;</span>

<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">]</span> <span class="k">of</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// name: Jane</span>
</code></pre></div></div> <p>除了 <code class="language-plaintext highlighter-rouge">for...of</code> 循环以外，扩展运算符（<code class="language-plaintext highlighter-rouge">...</code>）、解构赋值和 <code class="language-plaintext highlighter-rouge">Array.from</code> 方法内部调用的，都是遍历器接口。这意味着，它们都可以将 Generator 函数返回的 Iterator 对象，作为参数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">numbers </span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="mi">1</span>
  <span class="k">yield</span> <span class="mi">2</span>
  <span class="k">return</span> <span class="mi">3</span>
  <span class="k">yield</span> <span class="mi">4</span>
<span class="p">}</span>

<span class="c1">// 扩展运算符</span>
<span class="p">[...</span><span class="nf">numbers</span><span class="p">()]</span> <span class="c1">// [1, 2]</span>

<span class="c1">// 解构赋值</span>
<span class="kd">let</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">]</span> <span class="o">=</span> <span class="nf">numbers</span><span class="p">();</span>
<span class="nx">x</span> <span class="c1">// 1</span>
<span class="nx">y</span> <span class="c1">// 2</span>

<span class="c1">// Array.from 方法</span>
<span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nf">numbers</span><span class="p">())</span> <span class="c1">// [1, 2]</span>

<span class="c1">// for...of 循环</span>
<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">n</span> <span class="k">of</span> <span class="nf">numbers</span><span class="p">())</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 1</span>
<span class="c1">// 2</span>
</code></pre></div></div> <h2 id="四generatorprototypethrow">四、Generator.prototype.throw()</h2> <p>（1）Generator 函数返回的遍历器对象，有个 <code class="language-plaintext highlighter-rouge">throw</code> 方法，可以在函数体外抛出错误，然后在 Generator 函数体内捕获。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">yield</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">内部捕获</span><span class="dl">'</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nf">g</span><span class="p">();</span>
<span class="nx">i</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>

<span class="k">try</span> <span class="p">{</span>
  <span class="nx">i</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">i</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">外部捕获</span><span class="dl">'</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// 内部捕获 a</span>
<span class="c1">// 外部捕获 b</span>
</code></pre></div></div> <p>上面代码中，遍历器对象 i 连续抛出两个错误。</p> <ul> <li>第一个错误被 Generator 函数体内的 <code class="language-plaintext highlighter-rouge">catch</code> 语句捕获。</li> <li>i 第二次抛出错误，由于 Generator 函数内部的 <code class="language-plaintext highlighter-rouge">catch</code> 语句已经执行过了，就不会再捕捉到这个错误，所以这个错误被抛出了 Generator 函数体，被函数体外的 <code class="language-plaintext highlighter-rouge">catch</code> 语句捕获。</li> </ul> <p>（2）<code class="language-plaintext highlighter-rouge">throw</code> 方法可以接受一个参数，该参数会被 <code class="language-plaintext highlighter-rouge">catch</code> 语句接收，建议抛出 Error 对象的实例。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">yield</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nf">g</span><span class="p">();</span>
<span class="nx">i</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>
<span class="nx">i</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">出错了！</span><span class="dl">'</span><span class="p">));</span>
<span class="c1">// Error: 出错了！(…)</span>
</code></pre></div></div> <p>（3）如果 Generator 函数内部没有部署 <code class="language-plaintext highlighter-rouge">try...catch</code> 代码块，那么 <code class="language-plaintext highlighter-rouge">throw</code> 方法抛出的错误，将被外部 <code class="language-plaintext highlighter-rouge">try...catch</code> 代码块捕获。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">while </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">yield</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">内部捕获</span><span class="dl">'</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nf">g</span><span class="p">();</span>
<span class="nx">i</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>

<span class="k">try</span> <span class="p">{</span>
  <span class="nx">i</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">i</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">外部捕获</span><span class="dl">'</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// 外部捕获 a</span>
</code></pre></div></div> <p>如果 Generator 函数内部和外部，都没有部署 <code class="language-plaintext highlighter-rouge">try...catch</code> 代码块，那么程序将报错，直接中断执行。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="nf">gen</span><span class="p">(){</span>
  <span class="k">yield</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">yield</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">world</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">gen</span><span class="p">();</span>
<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>
<span class="nx">g</span><span class="p">.</span><span class="k">throw</span><span class="p">();</span>
<span class="c1">// hello</span>
<span class="c1">// Uncaught undefined</span>
</code></pre></div></div> <p>（4）<code class="language-plaintext highlighter-rouge">throw</code> 方法抛出的错误要被内部捕获，前提是必须至少执行过一次 <code class="language-plaintext highlighter-rouge">next</code> 方法。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">gen</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">内部捕获</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">gen</span><span class="p">();</span>
<span class="nx">g</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="c1">// Uncaught 1</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">g.throw(1)</code> 执行时，<code class="language-plaintext highlighter-rouge">next</code> 方法一次都没有执行过。这时，抛出的错误不会被内部捕获，而是直接在外部抛出，导致程序出错。这种行为其实很好理解，因为第一次执行 <code class="language-plaintext highlighter-rouge">next</code> 方法，等同于启动执行 Generator 函数的内部代码，否则 Generator 函数还没有开始执行，这时 throw 方法抛错只可能抛出在函数外部。</p> <p>（5）<code class="language-plaintext highlighter-rouge">throw</code> 方法被内部捕获以后，会附带执行到下一条 <code class="language-plaintext highlighter-rouge">yield</code> 表达式，这种情况下等同于执行一次 <code class="language-plaintext highlighter-rouge">next</code> 方法。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="nf">gen</span><span class="p">(){</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">yield</span> <span class="mi">3</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">gen</span><span class="p">();</span>
<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// { value:1, done:false }</span>
<span class="nx">g</span><span class="p">.</span><span class="k">throw</span><span class="p">()</span> <span class="c1">// { value:2, done:false }</span>
<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// { value:3, done:false }</span>
<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// { value:undefined, done:true }</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">g.throw</code> 方法被内部捕获以后，等同于执行了一次 <code class="language-plaintext highlighter-rouge">next</code> 方法，所以返回 <code class="language-plaintext highlighter-rouge">{ value:2, done:false }</code>。另外，也可以看到，只要 Generator 函数内部部署了 <code class="language-plaintext highlighter-rouge">try...catch</code> 代码块，那么遍历器的 <code class="language-plaintext highlighter-rouge">throw</code> 方法抛出的错误，不影响下一次遍历。</p> <p>注意，另外，全局的 <code class="language-plaintext highlighter-rouge">throw</code> 命令与 <code class="language-plaintext highlighter-rouge">g.throw</code> 方法是无关的，两者互不影响。</p> <p>（6）Generator 函数体外抛出的错误，可以在函数体内捕获；反过来，Generator 函数体内抛出的错误，也可以被函数体外的 <code class="language-plaintext highlighter-rouge">catch</code> 捕获。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">yield</span> <span class="mi">3</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nf">toUpperCase</span><span class="p">();</span>
  <span class="k">yield</span> <span class="nx">y</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">it</span> <span class="o">=</span> <span class="nf">foo</span><span class="p">();</span>

<span class="nx">it</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span> <span class="c1">// { value:3, done:false }</span>

<span class="k">try</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="c1">// TypeError: x.toUpperCase is not a function</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码中，第二个 <code class="language-plaintext highlighter-rouge">next</code> 方法向函数体内传入一个参数 42，数值是没有 <code class="language-plaintext highlighter-rouge">toUpperCase</code> 方法的，所以会抛出一个 TypeError 错误，被函数体外的 <code class="language-plaintext highlighter-rouge">catch</code> 捕获。</p> <p>一旦 Generator 执行过程中抛出错误，且没有被内部捕获，就不会再执行下去了。如果此后还调用 <code class="language-plaintext highlighter-rouge">next</code> 方法，将返回 <code class="language-plaintext highlighter-rouge">{ value: undefined, done: true }</code> 对象，即 JavaScript 引擎认为这个 Generator 已经运行结束了。</p> <h2 id="五generatorprototypereturn">五、Generator.prototype.return()</h2> <p>（1）Generator 函数返回的遍历器对象，有个 <code class="language-plaintext highlighter-rouge">return()</code> 方法，可以返回给定的值，并且终结遍历 Generator 函数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">gen</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">yield</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">yield</span> <span class="mi">3</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">gen</span><span class="p">();</span>

<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span>        <span class="c1">// { value: 1, done: false }</span>
<span class="nx">g</span><span class="p">.</span><span class="k">return</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// { value: "foo", done: true }</span>
<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span>        <span class="c1">// { value: undefined, done: true }</span>
</code></pre></div></div> <p>上面代码中，遍历器对象 g 调用 <code class="language-plaintext highlighter-rouge">return()</code> 方法后，返回值的 <code class="language-plaintext highlighter-rouge">value</code> 属性就是 <code class="language-plaintext highlighter-rouge">return()</code> 方法的参数 foo。并且，Generator 函数的遍历就终止了，返回值的 <code class="language-plaintext highlighter-rouge">done</code> 属性为 true，以后再调用 <code class="language-plaintext highlighter-rouge">next</code> 方法，<code class="language-plaintext highlighter-rouge">done</code> 属性总是返回 true。</p> <p>如果 <code class="language-plaintext highlighter-rouge">return()</code> 方法调用时，不提供参数，则返回值的 <code class="language-plaintext highlighter-rouge">value</code> 属性为 undefined。</p> <p>（2）如果 Generator 函数内部有 <code class="language-plaintext highlighter-rouge">try...finally</code> 代码块，且正在执行 <code class="language-plaintext highlighter-rouge">try</code> 代码块，那么 <code class="language-plaintext highlighter-rouge">return()</code> 方法会导致立刻进入 <code class="language-plaintext highlighter-rouge">finally</code> 代码块，执行完以后，整个函数才会结束。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">numbers </span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">yield</span> <span class="mi">3</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">yield</span> <span class="mi">5</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">yield</span> <span class="mi">6</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">numbers</span><span class="p">();</span>
<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// { value: 1, done: false }</span>
<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// { value: 2, done: false }</span>
<span class="nx">g</span><span class="p">.</span><span class="k">return</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="c1">// { value: 4, done: false }</span>
<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// { value: 5, done: false }</span>
<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// { value: 7, done: true }</span>
</code></pre></div></div> <p>上面代码中，调用 <code class="language-plaintext highlighter-rouge">return()</code> 方法后，就开始执行 <code class="language-plaintext highlighter-rouge">finally</code> 代码块，不执行 <code class="language-plaintext highlighter-rouge">try</code> 里面剩下的代码了，然后等到 <code class="language-plaintext highlighter-rouge">finally</code> 代码块执行完，再返回 <code class="language-plaintext highlighter-rouge">return()</code> 方法指定的返回值。</p> <h2 id="六nextthrowreturn-的共同点">六、next()、throw()、return() 的共同点</h2> <p><code class="language-plaintext highlighter-rouge">next()</code>、<code class="language-plaintext highlighter-rouge">throw()</code>、<code class="language-plaintext highlighter-rouge">return()</code> 这三个方法本质上是同一件事，它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换 <code class="language-plaintext highlighter-rouge">yield</code> 表达式。</p> <p>（1）<code class="language-plaintext highlighter-rouge">next()</code> 是将 <code class="language-plaintext highlighter-rouge">yield</code> 表达式替换成一个值。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">g</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">yield</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nf">g</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span> <span class="c1">// Object {value: 3, done: false}</span>

<span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// Object {value: 1, done: true}</span>
<span class="c1">// 相当于将 let result = yield x + y</span>
<span class="c1">// 替换成 let result = 1;</span>
</code></pre></div></div> <p>上面代码中，第二个 <code class="language-plaintext highlighter-rouge">next(1)</code> 方法就相当于将 <code class="language-plaintext highlighter-rouge">yield</code> 表达式替换成一个值1。如果 <code class="language-plaintext highlighter-rouge">next</code> 方法没有参数，就相当于替换成 undefined。</p> <p>（2）<code class="language-plaintext highlighter-rouge">throw()</code> 是将 <code class="language-plaintext highlighter-rouge">yield</code> 表达式替换成一个 <code class="language-plaintext highlighter-rouge">throw</code> 语句。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">gen</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">出错了</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// Uncaught Error: 出错了</span>
<span class="c1">// 相当于将 let result = yield x + y</span>
<span class="c1">// 替换成 let result = throw(new Error('出错了'));</span>
</code></pre></div></div> <p>（3）<code class="language-plaintext highlighter-rouge">return()</code> 是将 <code class="language-plaintext highlighter-rouge">yield</code> 表达式替换成一个 <code class="language-plaintext highlighter-rouge">return</code> 语句。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">gen</span><span class="p">.</span><span class="k">return</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// Object {value: 2, done: true}</span>
<span class="c1">// 相当于将 let result = yield x + y</span>
<span class="c1">// 替换成 let result = return 2;</span>
</code></pre></div></div> <h2 id="七yield-表达式">七、yield* 表达式</h2> <p>（1）ES6 提供了 <code class="language-plaintext highlighter-rouge">yield*</code> 表达式，用来在一个 Generator 函数里面执行另一个 Generator 函数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">bar</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">;</span>
  <span class="k">yield</span><span class="o">*</span> <span class="nf">foo</span><span class="p">();</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">y</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 等同于</span>
<span class="kd">function</span><span class="o">*</span> <span class="nf">bar</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">;</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">;</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">;</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">y</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 等同于</span>
<span class="kd">function</span><span class="o">*</span> <span class="nf">bar</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">;</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">v</span> <span class="k">of</span> <span class="nf">foo</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="nx">v</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">y</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">v</span> <span class="k">of</span> <span class="nf">bar</span><span class="p">()){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// "x"</span>
<span class="c1">// "a"</span>
<span class="c1">// "b"</span>
<span class="c1">// "y"</span>
</code></pre></div></div> <p>作为对比，看下边一个例子。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">inner</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">hello!</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span><span class="o">*</span> <span class="nf">outer1</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">;</span>
  <span class="k">yield</span> <span class="nf">inner</span><span class="p">();</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nf">outer1</span><span class="p">()</span>
<span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">().</span><span class="nx">value</span> <span class="c1">// "open"</span>
<span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">().</span><span class="nx">value</span> <span class="c1">// 返回一个遍历器对象</span>
<span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">().</span><span class="nx">value</span> <span class="c1">// "close"</span>

<span class="kd">function</span><span class="o">*</span> <span class="nf">outer2</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">open</span><span class="dl">'</span>
  <span class="k">yield</span><span class="o">*</span> <span class="nf">inner</span><span class="p">()</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">close</span><span class="dl">'</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nf">outer2</span><span class="p">()</span>
<span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">().</span><span class="nx">value</span> <span class="c1">// "open"</span>
<span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">().</span><span class="nx">value</span> <span class="c1">// "hello!"</span>
<span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">().</span><span class="nx">value</span> <span class="c1">// "close"</span>
</code></pre></div></div> <p>上面例子中，outer2 使用了 <code class="language-plaintext highlighter-rouge">yield*</code>，outer1 没使用。结果就是，outer2 返回该遍历器对象的内部值，outer1 返回一个遍历器对象。</p> <p>（2）从语法角度看，如果 <code class="language-plaintext highlighter-rouge">yield</code> 表达式后面跟的是一个遍历器对象，需要在 <code class="language-plaintext highlighter-rouge">yield</code> 表达式后面加上星号（<code class="language-plaintext highlighter-rouge">*</code>），表明它返回的是一个遍历器对象。这被称为 <code class="language-plaintext highlighter-rouge">yield*</code> 表达式。</p> <p><code class="language-plaintext highlighter-rouge">yield*</code> 后面的 Generator 函数，如果没有 <code class="language-plaintext highlighter-rouge">return</code> 语句，等同于在 Generator 函数内部，部署一个 <code class="language-plaintext highlighter-rouge">for...of</code> 循环。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">concat</span><span class="p">(</span><span class="nx">iter1</span><span class="p">,</span> <span class="nx">iter2</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">yield</span><span class="o">*</span> <span class="nx">iter1</span><span class="p">;</span>
  <span class="k">yield</span><span class="o">*</span> <span class="nx">iter2</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 等同于</span>

<span class="kd">function</span><span class="o">*</span> <span class="nf">concat</span><span class="p">(</span><span class="nx">iter1</span><span class="p">,</span> <span class="nx">iter2</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">var</span> <span class="nx">value</span> <span class="k">of</span> <span class="nx">iter1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">var</span> <span class="nx">value</span> <span class="k">of</span> <span class="nx">iter2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>注意，在有 <code class="language-plaintext highlighter-rouge">return</code> 语句时，则需要用 <code class="language-plaintext highlighter-rouge">var value = yield* iterator</code> 的形式获取 <code class="language-plaintext highlighter-rouge">return</code> 语句的值。</p> <p>（3）如果 <code class="language-plaintext highlighter-rouge">yield*</code> 后面跟着一个数组，由于数组原生支持遍历器，因此就会遍历数组成员。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">gen</span><span class="p">(){</span>
  <span class="k">yield</span><span class="o">*</span> <span class="p">[</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span><span class="p">];</span>
<span class="p">}</span>

<span class="nf">gen</span><span class="p">().</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// { value:"a", done:false }</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">yield</code> 命令后面如果不加星号，返回的是整个数组，加了星号就表示返回的是数组的遍历器对象。</p> <p>实际上，任何数据结构只要有 Iterator 接口，就可以被 <code class="language-plaintext highlighter-rouge">yield*</code> 遍历。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">read</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">;</span>
  <span class="k">yield</span><span class="o">*</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">;</span>
<span class="p">})();</span>

<span class="nx">read</span><span class="p">.</span><span class="nf">next</span><span class="p">().</span><span class="nx">value</span> <span class="c1">// "hello"</span>
<span class="nx">read</span><span class="p">.</span><span class="nf">next</span><span class="p">().</span><span class="nx">value</span> <span class="c1">// "h"</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">yield</code> 表达式返回整个字符串，<code class="language-plaintext highlighter-rouge">yield*</code> 语句返回单个字符。因为字符串具有 Iterator 接口，所以被 <code class="language-plaintext highlighter-rouge">yield*</code> 遍历。</p> <p>（4）如果被代理的 Generator 函数有 <code class="language-plaintext highlighter-rouge">return</code> 语句，那么就可以向代理它的 Generator 函数返回数据。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">yield</span> <span class="mi">3</span><span class="p">;</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span><span class="o">*</span> <span class="nf">bar</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">v</span> <span class="o">=</span> <span class="k">yield</span><span class="o">*</span> <span class="nf">foo</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">v: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">v</span><span class="p">);</span>
  <span class="k">yield</span> <span class="mi">4</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">it</span> <span class="o">=</span> <span class="nf">bar</span><span class="p">();</span>

<span class="nx">it</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span>
<span class="c1">// {value: 1, done: false}</span>
<span class="nx">it</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span>
<span class="c1">// {value: 2, done: false}</span>
<span class="nx">it</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span>
<span class="c1">// {value: 3, done: false}</span>
<span class="nx">it</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>
<span class="c1">// "v: foo"</span>
<span class="c1">// {value: 4, done: false}</span>
<span class="nx">it</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span>
<span class="c1">// {value: undefined, done: true}</span>
</code></pre></div></div> <p>上面代码在第四次调用 <code class="language-plaintext highlighter-rouge">next</code> 方法的时候，屏幕上会有输出，这是因为函数 <code class="language-plaintext highlighter-rouge">foo</code> 的 <code class="language-plaintext highlighter-rouge">return</code> 语句，向函数 <code class="language-plaintext highlighter-rouge">bar</code> 提供了返回值。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">genFuncWithReturn</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">;</span>
  <span class="k">yield</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">;</span>
  <span class="k">return</span> <span class="dl">'</span><span class="s1">The result</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">function</span><span class="o">*</span> <span class="nf">logReturned</span><span class="p">(</span><span class="nx">genObj</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">yield</span><span class="o">*</span> <span class="nx">genObj</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
<span class="p">}</span>

<span class="p">[...</span><span class="nf">logReturned</span><span class="p">(</span><span class="nf">genFuncWithReturn</span><span class="p">())]</span>
<span class="c1">// The result</span>
<span class="c1">// [ 'a', 'b' ]</span>
</code></pre></div></div> <p>上面代码中，存在两次遍历。</p> <ul> <li>第一次是扩展运算符遍历函数 <code class="language-plaintext highlighter-rouge">logReturned</code> 返回的遍历器对象。</li> <li>第二次是 <code class="language-plaintext highlighter-rouge">yield*</code> 语句遍历函数 <code class="language-plaintext highlighter-rouge">genFuncWithReturn</code> 返回的遍历器对象。</li> </ul> <p>这两次遍历的效果是叠加的，最终表现为扩展运算符遍历函数 <code class="language-plaintext highlighter-rouge">genFuncWithReturn</code> 返回的遍历器对象。所以，最后的数据表达式得到的值等于 <code class="language-plaintext highlighter-rouge">[ 'a', 'b' ]</code>。但是，函数 <code class="language-plaintext highlighter-rouge">genFuncWithReturn</code> 的 <code class="language-plaintext highlighter-rouge">return</code> 语句的返回值 <code class="language-plaintext highlighter-rouge">The result</code>，会返回给函数 <code class="language-plaintext highlighter-rouge">logReturned</code> 内部的 <code class="language-plaintext highlighter-rouge">result</code> 变量，因此会有终端输出。</p> <p>（5）<code class="language-plaintext highlighter-rouge">yield*</code> 命令可以很方便地取出嵌套数组的所有成员。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">iterTree</span><span class="p">(</span><span class="nx">tree</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nf">isArray</span><span class="p">(</span><span class="nx">tree</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">tree</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">yield</span><span class="o">*</span> <span class="nf">iterTree</span><span class="p">(</span><span class="nx">tree</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="nx">tree</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">tree</span> <span class="o">=</span> <span class="p">[</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">],</span> <span class="p">[</span><span class="dl">'</span><span class="s1">d</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">e</span><span class="dl">'</span><span class="p">]</span> <span class="p">];</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">x</span> <span class="k">of</span> <span class="nf">iterTree</span><span class="p">(</span><span class="nx">tree</span><span class="p">))</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// a</span>
<span class="c1">// b</span>
<span class="c1">// c</span>
<span class="c1">// d</span>
<span class="c1">// e</span>
</code></pre></div></div> <p>由于扩展运算符 <code class="language-plaintext highlighter-rouge">...</code> 默认调用 Iterator 接口，所以上面这个函数也可以用于嵌套数组的平铺。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[...</span><span class="nf">iterTree</span><span class="p">(</span><span class="nx">tree</span><span class="p">)]</span> <span class="c1">// ["a", "b", "c", "d", "e"]</span>
</code></pre></div></div> <h2 id="八作为对象属性的-generator-函数">八、作为对象属性的 Generator 函数</h2> <p>如果一个对象的属性是 Generator 函数，可以简写成下面的形式。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="o">*</span> <span class="nf">generator</span><span class="p">()</span> <span class="p">{</span>
    <span class="err">···</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// 等同于</span>
<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">generator</span><span class="p">:</span> <span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ···</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h2 id="九generator-函数的-this">九、Generator 函数的 this</h2> <p>（1）ES6 规定，Generator 函数返回的遍历器对象，是 Generator 函数的实例，也继承了 Generator 函数的 prototype 对象上的方法。但是，如果把 Generator 函数当作普通的构造函数，并不会生效，因为 Generator 函数返回的总是遍历器对象，而不是 this 对象。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">g</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nf">g</span><span class="p">();</span>
<span class="nx">obj</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">a</span> <span class="c1">// undefined</span>
</code></pre></div></div> <p>上面代码中，Generator 函数 g 在 this 对象上面添加了一个属性 a，但是 obj 对象拿不到这个属性。</p> <p>（2）Generator 函数也不能跟 new 命令一起用，会报错。</p> <h2 id="十含义">十、含义</h2> <h3 id="101-generator-与状态机">10.1 Generator 与状态机</h3> <p>Generator 是实现状态机的最佳结构。比如，下面的 clock 函数就是一个状态机。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">ticking</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">clock</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">ticking</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Tick!</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">else</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Tock!</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">ticking</span> <span class="o">=</span> <span class="o">!</span><span class="nx">ticking</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码的 clock 函数一共有两种状态（Tick 和 Tock），每运行一次，就改变一次状态。这个函数如果用 Generator 实现，就是下面这样。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">clock</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">while </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Tick!</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">yield</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Tock!</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">yield</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <p>上面的 Generator 实现与 ES5 实现对比，可以看到少了用来保存状态的外部变量 ticking，这样就更简洁，更安全（状态不会被非法篡改）、更符合函数式编程的思想，在写法上也更优雅。Generator 之所以可以不用外部变量保存状态，是因为它本身就包含了一个状态信息，即目前是否处于暂停态。</p> <h3 id="102-generator-与协程">10.2 Generator 与协程</h3> <h4 id="1协程与子例程的差异">（1）协程与子例程的差异</h4> <p>传统的“子例程”（subroutine）采用堆栈式“后进先出”的执行方式，只有当调用的子函数完全执行完毕，才会结束执行父函数。协程与其不同，多个线程（单线程情况下，即多个函数）可以并行执行，但是只有一个线程（或函数）处于正在运行的状态，其他线程（或函数）都处于暂停态（suspended），线程（或函数）之间可以交换执行权。也就是说，一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。</p> <p>从实现上看，在内存中，子例程只使用一个栈（stack），而协程是同时存在多个栈，但只有一个栈是在运行状态，也就是说，协程是以多占用内存为代价，实现多任务的并行。</p> <h4 id="2协程与普通线程的差异">（2）协程与普通线程的差异</h4> <p>不难看出，协程适合用于多任务运行的环境。在这个意义上，它与普通的线程很相似，都有自己的执行上下文、可以分享全局变量。它们的不同之处在于，同一时间可以有多个线程处于运行状态，但是运行的协程只能有一个，其他协程都处于暂停状态。此外，普通的线程是抢先式的，到底哪个线程优先得到资源，必须由运行环境决定，但是协程是合作式的，执行权由协程自己分配。</p> <p>由于 JavaScript 是单线程语言，只能保持一个调用栈。引入协程以后，每个任务可以保持自己的调用栈。这样做的最大好处，就是抛出错误的时候，可以找到原始的调用栈。不至于像异步操作的回调函数那样，一旦出错，原始的调用栈早就结束。</p> <p>Generator 函数是 ES6 对协程的实现，但属于不完全实现。Generator 函数被称为“半协程”（semi-coroutine），意思是只有 Generator 函数的调用者，才能将程序的执行权还给 Generator 函数。如果是完全执行的协程，任何函数都可以让暂停的协程继续执行。</p> <p>如果将 Generator 函数当作协程，完全可以将多个需要互相协作的任务写成 Generator 函数，它们之间使用yield表达式交换控制权。</p> <h3 id="103-generator-与上下文">10.3 Generator 与上下文</h3> <p>JavaScript 代码运行时，会产生一个全局的上下文环境（context，又称运行环境），包含了当前所有的变量和对象。然后，执行函数（或块级代码）的时候，又会在当前上下文环境的上层，产生一个函数运行的上下文，变成当前（active）的上下文，由此形成一个上下文环境的堆栈（context stack）。</p> <p>这个堆栈是“后进先出”的数据结构，最后产生的上下文环境首先执行完成，退出堆栈，然后再执行完成它下层的上下文，直至所有代码执行完成，堆栈清空。</p> <p>Generator 函数不是这样，它执行产生的上下文环境，一旦遇到yield命令，就会暂时退出堆栈，但是并不消失，里面的所有变量和对象会冻结在当前状态。等到对它执行next命令时，这个上下文环境又会重新加入调用栈，冻结的变量和对象恢复执行。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">gen</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">gen</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span>
  <span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">().</span><span class="nx">value</span><span class="p">,</span>
  <span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">().</span><span class="nx">value</span><span class="p">,</span>
<span class="p">);</span>
</code></pre></div></div> <p>上面代码中，第一次执行 <code class="language-plaintext highlighter-rouge">g.next()</code> 时，Generator 函数 <code class="language-plaintext highlighter-rouge">gen</code> 的上下文会加入堆栈，即开始运行 <code class="language-plaintext highlighter-rouge">gen</code> 内部的代码。等遇到 <code class="language-plaintext highlighter-rouge">yield 1</code> 时，<code class="language-plaintext highlighter-rouge">gen</code> 上下文退出堆栈，内部状态冻结。第二次执行 <code class="language-plaintext highlighter-rouge">g.next()</code> 时，<code class="language-plaintext highlighter-rouge">gen</code> 上下文重新加入堆栈，变成当前的上下文，重新恢复执行。</p> <h2 id="十一应用">十一、应用</h2> <p>Generator 可以暂停函数执行，返回任意表达式的值。这种特点使得 Generator 有多种应用场景。</p> <h3 id="111-异步操作的同步化表达">11.1 异步操作的同步化表达</h3> <h3 id="112-控制流管理">11.2 控制流管理</h3> <h3 id="113-部署-iterator-接口">11.3 部署 Iterator 接口</h3> <p>利用 Generator 函数，可以在任意对象上部署 Iterator 接口。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">iterEntries</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nf">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">keys</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
    <span class="k">yield</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]];</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">myObj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">bar</span><span class="p">:</span> <span class="mi">7</span> <span class="p">};</span>

<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">]</span> <span class="k">of</span> <span class="nf">iterEntries</span><span class="p">(</span><span class="nx">myObj</span><span class="p">))</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// foo 3</span>
<span class="c1">// bar 7</span>
</code></pre></div></div> <h3 id="114-作为数据结构">11.4 作为数据结构</h3> <p>Generator 可以看作是数据结构，更确切地说，可以看作是一个数组结构，因为 Generator 函数可以返回一系列的值，这意味着它可以对任意表达式，提供类似数组的接口。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">doStuff</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="dl">'</span><span class="s1">hello.txt</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">yield</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="dl">'</span><span class="s1">world.txt</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">yield</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="dl">'</span><span class="s1">and-such.txt</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码就是依次返回三个函数，但是由于使用了 Generator 函数，导致可以像处理数组那样，处理这三个返回的函数。然后，就可以使用 <code class="language-plaintext highlighter-rouge">for...of</code> 循环进行处理。</p> <p>不难看出 Generator 使得数据或者操作，具备了类似数组的接口。</p> <h2 id="十二generator-函数的异步应用">十二、Generator 函数的异步应用</h2> <h3 id="121-传统方法">12.1 传统方法</h3> <p>ES6 诞生以前，异步编程的方法，大概有下面四种。</p> <ul> <li>回调函数</li> <li>事件监听</li> <li>发布/订阅</li> <li>Promise 对象</li> </ul> <p>Generator 函数将 JavaScript 异步编程带入了一个全新的阶段。</p> <h3 id="122-基本概念">12.2 基本概念</h3> <h4 id="1异步">（1）异步</h4> <p>所谓”异步”，简单说就是一个任务不是连续完成的，可以理解成该任务被人为分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。</p> <p>比如，有一个任务是读取文件进行处理，任务的第一段是向操作系统发出请求，要求读取文件。然后，程序执行其他任务，等到操作系统返回文件，再接着执行任务的第二段（处理文件）。这种不连续的执行，就叫做异步。</p> <p>相应地，连续的执行就叫做同步。由于是连续执行，不能插入其他任务，所以操作系统从硬盘读取文件的这段时间，程序只能干等着。</p> <h4 id="2回调函数">（2）回调函数</h4> <p>JavaScript 语言对异步编程的实现，就是回调函数。所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。回调函数的英语名字 <code class="language-plaintext highlighter-rouge">callback</code>，直译过来就是”重新调用”。</p> <h4 id="3promise">（3）Promise</h4> <p>回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取 <code class="language-plaintext highlighter-rouge">A</code> 文件之后，再读取 <code class="language-plaintext highlighter-rouge">B</code> 文件，代码如下。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">fs</span><span class="p">.</span><span class="nf">readFile</span><span class="p">(</span><span class="nx">fileA</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf-8</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">fs</span><span class="p">.</span><span class="nf">readFile</span><span class="p">(</span><span class="nx">fileB</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf-8</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div> <p>多个异步操作形成了强耦合，只要有一个操作需要修改，它的上层回调函数和下层回调函数，可能都要跟着修改。这种情况就称为”回调函数地狱”（callback hell）。Promise 对象就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的嵌套，改成链式调用。</p> <p>Promise 的写法只是回调函数的改进，使用 <code class="language-plaintext highlighter-rouge">then</code> 方法以后，异步任务的两段执行看得更清楚了，除此以外，并无新意。Promise 的最大问题是代码冗余，原来的任务被 Promise 包装了一下，不管什么操作，一眼看去都是一堆 <code class="language-plaintext highlighter-rouge">then</code>，原来的语义变得很不清楚。</p> <h3 id="123-generator-函数">12.3 Generator 函数</h3> <h4 id="1协程">（1）协程</h4> <p>传统的编程语言，早有异步编程的解决方案（其实是多任务的解决方案）。其中有一种叫做<strong>协程</strong>（coroutine），意思是多个线程互相协作，完成异步任务。</p> <p>协程有点像函数，又有点像线程。它的运行流程大致如下。</p> <ul> <li>第一步，协程 <code class="language-plaintext highlighter-rouge">A</code> 开始执行。</li> <li>第二步，协程 <code class="language-plaintext highlighter-rouge">A</code> 执行到一半，进入暂停，执行权转移到协程 <code class="language-plaintext highlighter-rouge">B</code>。</li> <li>第三步，（一段时间后）协程 <code class="language-plaintext highlighter-rouge">B</code> 交还执行权。</li> <li>第四步，协程 <code class="language-plaintext highlighter-rouge">A</code> 恢复执行。</li> </ul> <p>上面流程的协程 <code class="language-plaintext highlighter-rouge">A</code>，就是异步任务，因为它分成两段（或多段）执行。</p> <p>举例来说，读取文件的协程写法如下。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">asyncJob</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// ...其他代码</span>
  <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">readFile</span><span class="p">(</span><span class="nx">fileA</span><span class="p">);</span>
  <span class="c1">// ...其他代码</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码的函数 <code class="language-plaintext highlighter-rouge">asyncJob</code> 是一个协程，它的奥妙就在其中的 <code class="language-plaintext highlighter-rouge">yield</code> 命令。它表示执行到此处，执行权将交给其他协程。也就是说，<code class="language-plaintext highlighter-rouge">yield</code> 命令是异步两个阶段的分界线。</p> <p>协程遇到 <code class="language-plaintext highlighter-rouge">yield</code> 命令就暂停，等到执行权返回，再从暂停的地方继续往后执行。它的最大优点，就是代码的写法非常像同步操作，如果去除 <code class="language-plaintext highlighter-rouge">yield</code> 命令，简直一模一样。</p> <h4 id="2协程的-generator-函数实现">（2）协程的 Generator 函数实现</h4> <p>Generator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。整个 Generator 函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用 <code class="language-plaintext highlighter-rouge">yield</code> 语句注明。Generator 函数的执行方法如下。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">gen</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="k">yield</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">y</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">gen</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// { value: 3, done: false }</span>
<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span> <span class="c1">// { value: undefined, done: true }</span>
</code></pre></div></div> <p>上面代码中，调用 Generator 函数，会返回一个内部指针（即遍历器）<code class="language-plaintext highlighter-rouge">g</code>。这是 Generator 函数不同于普通函数的另一个地方，即执行它不会返回结果，返回的是<strong>指针对象</strong>。调用指针 <code class="language-plaintext highlighter-rouge">g</code> 的 <code class="language-plaintext highlighter-rouge">next</code> 方法，会移动内部指针（即执行异步任务的第一段），指向第一个遇到的 <code class="language-plaintext highlighter-rouge">yield</code> 语句，上例是执行到 <code class="language-plaintext highlighter-rouge">x + 2</code> 为止。</p> <p>换言之，<code class="language-plaintext highlighter-rouge">next</code> 方法的作用是分阶段执行 Generator 函数。每次调用 <code class="language-plaintext highlighter-rouge">next</code> 方法，会返回一个对象，表示当前阶段的信息（<code class="language-plaintext highlighter-rouge">value</code> 属性和 <code class="language-plaintext highlighter-rouge">done</code> 属性）。<code class="language-plaintext highlighter-rouge">value</code> 属性是 <code class="language-plaintext highlighter-rouge">yield</code> 语句后面表达式的值，表示当前阶段的值；<code class="language-plaintext highlighter-rouge">done</code> 属性是一个布尔值，表示 Generator 函数是否执行完毕，即是否还有下一个阶段。</p> <h4 id="3generator-函数的数据交换和错误处理">（3）Generator 函数的数据交换和错误处理</h4> <p>Generator 函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。除此之外，它还有两个特性，使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。</p> <p><code class="language-plaintext highlighter-rouge">next</code> 返回值的 <code class="language-plaintext highlighter-rouge">value</code> 属性，是 Generator 函数向外输出数据；<code class="language-plaintext highlighter-rouge">next</code> 方法还可以接受参数，向 Generator 函数体内输入数据。</p> <p>Generator 函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">gen</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="k">yield</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">y</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">gen</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>
<span class="nx">g</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="dl">'</span><span class="s1">出错了</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// 出错了</span>
</code></pre></div></div> <p>上面代码的最后一行，Generator 函数体外，使用指针对象的 <code class="language-plaintext highlighter-rouge">throw</code> 方法抛出的错误，可以被函数体内的 <code class="language-plaintext highlighter-rouge">try...catch</code> 代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。</p> <h4 id="4异步任务的封装">（4）异步任务的封装</h4> <p>下面看看如何使用 Generator 函数，执行一个真实的异步任务。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">node-fetch</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">function</span><span class="o">*</span> <span class="nf">gen</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">https://api.github.com/users/github</span><span class="dl">'</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">bio</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码中，Generator 函数封装了一个异步操作，该操作先读取一个远程接口，然后从 JSON 格式的数据解析信息。就像前面说过的，这段代码非常像同步操作，除了加上了 <code class="language-plaintext highlighter-rouge">yield</code> 命令。</p> <p>执行这段代码的方法如下。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">gen</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>

<span class="nx">result</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nf">json</span><span class="p">();</span>
<span class="p">}).</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
  <span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>上面代码中，首先执行 Generator 函数，获取遍历器对象，然后使用 <code class="language-plaintext highlighter-rouge">next</code> 方法（第二行），执行异步任务的第一阶段。由于 Fetch 模块返回的是一个 Promise 对象，因此要用 <code class="language-plaintext highlighter-rouge">then</code> 方法调用下一个 <code class="language-plaintext highlighter-rouge">next</code> 方法。</p> <p>可以看到，虽然 Generator 函数将异步操作表示得很简洁，但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段）。</p> <h3 id="124-thunk-函数">12.4 Thunk 函数</h3> <p>Thunk 函数是<strong>自动执行 Generator 函数</strong>的一种方法。</p> <h4 id="1参数的求值策略">（1）参数的求值策略</h4> <p>在编程语言的早期，计算机学家还在研究，编译器怎么写比较好。一个争论的焦点是<strong>求值策略</strong>，即函数的参数到底应该何时求值。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">f</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">m</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">f</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)</span>
</code></pre></div></div> <p>上面代码先定义函数 <code class="language-plaintext highlighter-rouge">f</code>，然后向它传入表达式 <code class="language-plaintext highlighter-rouge">x + 5</code>。请问，这个表达式应该何时求值？</p> <p>一种意见是<strong>传值调用</strong>（call by value），即在进入函数体之前，就计算 <code class="language-plaintext highlighter-rouge">x + 5</code> 的值（等于 6），再将这个值传入函数 <code class="language-plaintext highlighter-rouge">f</code>。C 语言就采用这种策略。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">f</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)</span>
<span class="c1">// 传值调用时，等同于</span>
<span class="nf">f</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</code></pre></div></div> <p>另一种意见是<strong>传名调用</strong>（call by name），即直接将表达式 <code class="language-plaintext highlighter-rouge">x + 5</code> 传入函数体，只在用到它的时候求值。Haskell 语言采用这种策略。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">f</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)</span>
<span class="c1">// 传名调用时，等同于</span>
<span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>
</code></pre></div></div> <p>两种方式各有利弊。传值调用比较简单，但是对参数求值的时候，实际上还没用到这个参数，有可能造成性能损失。</p> <h4 id="2thunk-函数的含义">（2）Thunk 函数的含义</h4> <p>编译器的<strong>传名调用</strong>实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 <strong>Thunk 函数</strong>。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">f</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">m</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">f</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">5</span><span class="p">);</span>

<span class="c1">// 等同于</span>

<span class="kd">var</span> <span class="nx">thunk</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">function</span> <span class="nf">f</span><span class="p">(</span><span class="nx">thunk</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">thunk</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码中，函数 <code class="language-plaintext highlighter-rouge">f</code> 的参数 <code class="language-plaintext highlighter-rouge">x + 5</code> 被一个函数替换了。凡是用到原参数的地方，对 Thunk 函数求值即可。</p> <p>Thunk 函数是<strong>传名调用</strong>的一种实现策略，用来替换某个表达式。</p> <h4 id="3javascript-语言的-thunk-函数">（3）JavaScript 语言的 Thunk 函数</h4> <p>JavaScript 语言是<strong>传值调用</strong>，它的 Thunk 函数含义有所不同。在 JavaScript 语言中，Thunk 函数替换的不是表达式，而是多参数函数，将其替换成一个<strong>只接受回调函数作为参数的单参数函数</strong>。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 正常版本的readFile（多参数版本）</span>
<span class="nx">fs</span><span class="p">.</span><span class="nf">readFile</span><span class="p">(</span><span class="nx">fileName</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>

<span class="c1">// Thunk版本的readFile（单参数版本）</span>
<span class="kd">var</span> <span class="nx">Thunk</span> <span class="o">=</span> <span class="nf">function </span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">function </span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">fs</span><span class="p">.</span><span class="nf">readFile</span><span class="p">(</span><span class="nx">fileName</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
  <span class="p">};</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">readFileThunk</span> <span class="o">=</span> <span class="nc">Thunk</span><span class="p">(</span><span class="nx">fileName</span><span class="p">);</span>
<span class="nf">readFileThunk</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">fs</code> 模块的 <code class="language-plaintext highlighter-rouge">readFile</code> 方法是一个多参数函数，两个参数分别为文件名和回调函数。经过转换器处理，它变成了一个单参数函数，只接受回调函数作为参数。这个单参数版本，就叫做 Thunk 函数。</p> <p>任何函数，只要参数有回调函数，就能写成 Thunk 函数的形式。下面是一个简单的 Thunk 函数转换器。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ES5版本</span>
<span class="kd">var</span> <span class="nx">Thunk</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">){</span>
  <span class="k">return</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
    <span class="k">return</span> <span class="nf">function </span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
      <span class="nx">args</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>
<span class="p">};</span>

<span class="c1">// ES6版本</span>
<span class="kd">const</span> <span class="nx">Thunk</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">function </span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">function </span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>
<span class="p">};</span>
</code></pre></div></div> <p>使用上面的转换器，生成 <code class="language-plaintext highlighter-rouge">fs.readFile</code> 的 Thunk 函数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">readFileThunk</span> <span class="o">=</span> <span class="nc">Thunk</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">);</span>
<span class="nf">readFileThunk</span><span class="p">(</span><span class="nx">fileA</span><span class="p">)(</span><span class="nx">callback</span><span class="p">);</span>
</code></pre></div></div> <h4 id="4thunkify-模块">（4）Thunkify 模块</h4> <p>生产环境的转换器，建议使用 Thunkify 模块。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install </span>thunkify
</code></pre></div></div> <p>使用方式如下。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">thunkify</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">thunkify</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">read</span> <span class="o">=</span> <span class="nf">thunkify</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">);</span>
<span class="nf">read</span><span class="p">(</span><span class="dl">'</span><span class="s1">package.json</span><span class="dl">'</span><span class="p">)(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">str</span><span class="p">){</span>
  <span class="c1">// ...</span>
<span class="p">});</span>
</code></pre></div></div> <p>Thunkify 的源码与上一节那个简单的转换器非常像。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">thunkify</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

    <span class="k">for </span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nf">function </span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">called</span><span class="p">;</span>

      <span class="nx">args</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">called</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
        <span class="nx">called</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="nx">done</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
      <span class="p">});</span>

      <span class="k">try</span> <span class="p">{</span>
        <span class="nx">fn</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <p>它的源码主要多了一个检查机制，变量 <code class="language-plaintext highlighter-rouge">called</code> 确保回调函数只运行一次。这样的设计与下文的 Generator 函数相关。请看下面的例子。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
  <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
  <span class="nf">callback</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span>
  <span class="nf">callback</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">ft</span> <span class="o">=</span> <span class="nf">thunkify</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">print</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="nx">console</span><span class="p">);</span>
<span class="nf">ft</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)(</span><span class="nx">print</span><span class="p">);</span>
<span class="c1">// 3</span>
</code></pre></div></div> <p>上面代码中，由于 <code class="language-plaintext highlighter-rouge">thunkify</code> 只允许回调函数执行一次，所以只输出一行结果。</p> <h4 id="5generator-函数的流程管理">（5）Generator 函数的流程管理</h4> <p>Thunk 函数可以用于 Generator 函数的自动流程管理（也就是说，Generator 函数现在可以自动执行。）。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nf">gen</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">gen</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>

<span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="nx">res</span><span class="p">.</span><span class="nx">done</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
  <span class="nx">res</span> <span class="o">=</span> <span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码中，Generator 函数gen会自动执行完所有步骤。</p> <p>但是，这不适合异步操作。如果必须保证前一步执行完，才能执行后一步，上面的自动执行就不可行。这时，Thunk 函数就能派上用处。以读取文件为例。下面的 Generator 函数封装了两个异步操作。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">thunkify</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">thunkify</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">readFileThunk</span> <span class="o">=</span> <span class="nf">thunkify</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">r1</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">readFileThunk</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/fstab</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">r1</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
  <span class="kd">var</span> <span class="nx">r2</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">readFileThunk</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/shells</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">r2</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
<span class="p">};</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">yield</code> 命令用于将程序的执行权移出 Generator 函数，那么就需要一种方法，将执行权再交还给 Generator 函数。</p> <p>这种方法就是 Thunk 函数，因为它可以在回调函数里，将执行权交还给 Generator 函数。为了便于理解，我们先看如何手动执行上面这个 Generator 函数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">gen</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">r1</span> <span class="o">=</span> <span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>
<span class="nx">r1</span><span class="p">.</span><span class="nf">value</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">r2</span> <span class="o">=</span> <span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="nx">r2</span><span class="p">.</span><span class="nf">value</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
    <span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div> <p>上面代码中，变量 <code class="language-plaintext highlighter-rouge">g</code> 是 Generator 函数的内部指针，表示目前执行到哪一步。<code class="language-plaintext highlighter-rouge">next</code> 方法负责将指针移动到下一步，并返回该步的信息（<code class="language-plaintext highlighter-rouge">value</code> 属性和 <code class="language-plaintext highlighter-rouge">done</code> 属性）。</p> <p>仔细查看上面的代码，可以发现 Generator 函数的执行过程，其实是将同一个回调函数，反复传入 <code class="language-plaintext highlighter-rouge">next</code> 方法的 <code class="language-plaintext highlighter-rouge">value</code> 属性。这使得我们可以用递归来自动完成这个过程。</p> <h4 id="6thunk-函数的自动流程管理">（6）Thunk 函数的自动流程管理</h4> <p>Thunk 函数真正的威力，在于可以自动执行 Generator 函数。下面就是一个基于 Thunk 函数的 Generator 执行器。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">run</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nf">fn</span><span class="p">();</span>

  <span class="kd">function</span> <span class="nf">next</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="nx">result</span><span class="p">.</span><span class="nf">value</span><span class="p">(</span><span class="nx">next</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nf">next</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span><span class="o">*</span> <span class="nf">g</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="nf">run</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span>
</code></pre></div></div> <p>上面代码的 <code class="language-plaintext highlighter-rouge">run</code> 函数，就是一个 Generator 函数的自动执行器。内部的 <code class="language-plaintext highlighter-rouge">next</code> 函数就是 Thunk 的回调函数。<code class="language-plaintext highlighter-rouge">next</code> 函数先将指针移到 Generator 函数的下一步（<code class="language-plaintext highlighter-rouge">gen.next</code> 方法），然后判断 Generator 函数是否结束（<code class="language-plaintext highlighter-rouge">result.done</code> 属性），如果没结束，就将 <code class="language-plaintext highlighter-rouge">next</code> 函数再传入 Thunk 函数（<code class="language-plaintext highlighter-rouge">result.value</code> 属性），否则就直接退出。</p> <p>有了这个执行器，执行 Generator 函数方便多了。不管内部有多少个异步操作，直接把 Generator 函数传入 <code class="language-plaintext highlighter-rouge">run</code> 函数即可。当然，前提是每一个异步操作，都要是 Thunk 函数，也就是说，跟在 <code class="language-plaintext highlighter-rouge">yield</code> 命令后面的必须是 Thunk 函数。</p> <p>Thunk 函数并不是 Generator 函数自动执行的唯一方案。因为自动执行的关键是，必须有一种机制，自动控制 Generator 函数的流程，<strong>接收和交还程序的执行权</strong>。回调函数可以做到这一点，Promise 对象也可以做到这一点。</p> <h3 id="125-co-模块">12.5 co 模块</h3> <h4 id="1基本用法">（1）基本用法</h4> <p><a href="https://github.com/tj/co">co 模块</a>用于 Generator 函数的自动执行。</p> <p>下面是一个 Generator 函数，用于依次读取两个文件。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">f1</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/fstab</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">f2</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/shells</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f1</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f2</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
<span class="p">};</span>
</code></pre></div></div> <p>co 模块可以让你不用编写 Generator 函数的执行器。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">co</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">co</span><span class="dl">'</span><span class="p">);</span>
<span class="nf">co</span><span class="p">(</span><span class="nx">gen</span><span class="p">);</span>
</code></pre></div></div> <p>上面代码中，Generator 函数只要传入 <code class="language-plaintext highlighter-rouge">co</code> 函数，就会自动执行。</p> <p><code class="language-plaintext highlighter-rouge">co</code> 函数返回一个 Promise 对象，因此可以用 <code class="language-plaintext highlighter-rouge">then</code> 方法添加回调函数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">co</span><span class="p">(</span><span class="nx">gen</span><span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="nf">function </span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Generator 函数执行完成</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>上面代码中，等到 Generator 函数执行结束，就会输出一行提示。</p> <h4 id="2co-模块的原理">（2）co 模块的原理</h4> <p>为什么 co 可以自动执行 Generator 函数？</p> <p>前面说过，Generator 就是一个异步操作的容器。它的自动执行需要一种机制，当异步操作有了结果，能够自动交回执行权。</p> <p>两种方法可以做到这一点。</p> <ol> <li><strong>回调函数</strong>：将异步操作包装成 Thunk 函数，在回调函数里面交回执行权。</li> <li><strong>Promise 对象</strong>：将异步操作包装成 Promise 对象，用 <code class="language-plaintext highlighter-rouge">then</code> 方法交回执行权。</li> </ol> <p>co 模块其实就是将两种自动执行器（Thunk 函数和 Promise 对象），包装成一个模块。使用 co 的前提条件是，Generator 函数的 <code class="language-plaintext highlighter-rouge">yield</code> 命令后面，只能是 Thunk 函数或 Promise 对象。如果数组或对象的成员，全部都是 Promise 对象，也可以使用 co，详见后文的例子。</p> <h4 id="3基于-promise-对象的自动执行">（3）基于 Promise 对象的自动执行</h4> <p>首先，把 <code class="language-plaintext highlighter-rouge">fs</code> 模块的 <code class="language-plaintext highlighter-rouge">readFile</code> 方法包装成一个 Promise 对象。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">readFile</span> <span class="o">=</span> <span class="nf">function </span><span class="p">(</span><span class="nx">fileName</span><span class="p">){</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">){</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nf">readFile</span><span class="p">(</span><span class="nx">fileName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="nf">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="nf">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">f1</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/fstab</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">f2</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/shells</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f1</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f2</span><span class="p">.</span><span class="nf">toString</span><span class="p">());</span>
<span class="p">};</span>
</code></pre></div></div> <p>然后，手动执行上面的 Generator 函数。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">gen</span><span class="p">();</span>

<span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">().</span><span class="nx">value</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">value</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div> <p>手动执行其实就是用 <code class="language-plaintext highlighter-rouge">then</code> 方法，层层添加回调函数。理解了这一点，就可以写出一个自动执行器。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">run</span><span class="p">(</span><span class="nx">gen</span><span class="p">){</span>
  <span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="nf">gen</span><span class="p">();</span>

  <span class="kd">function</span> <span class="nf">next</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">g</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span> <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
      <span class="nf">next</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="nf">next</span><span class="p">();</span>
<span class="p">}</span>

<span class="nf">run</span><span class="p">(</span><span class="nx">gen</span><span class="p">);</span>
</code></pre></div></div> <p>上面代码中，只要 Generator 函数还没执行到最后一步，<code class="language-plaintext highlighter-rouge">next</code> 函数就调用自身，以此实现自动执行。</p> <h4 id="4co-模块的源码">（4）co 模块的源码</h4> <p>co 就是上面那个自动执行器的扩展，它的源码只有几十行，非常简单。</p> <p>首先，co 函数接受 Generator 函数作为参数，返回一个 Promise 对象。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">co</span><span class="p">(</span><span class="nx">gen</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{});</span>
<span class="p">}</span>
</code></pre></div></div> <p>在返回的 Promise 对象里面，co 先检查参数 <code class="language-plaintext highlighter-rouge">gen</code> 是否为 Generator 函数。如果是，就执行该函数，得到一个内部指针对象；如果不是就返回，并将 Promise 对象的状态改为 <code class="language-plaintext highlighter-rouge">resolved</code>。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">co</span><span class="p">(</span><span class="nx">gen</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">gen</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">function</span><span class="dl">'</span><span class="p">)</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nx">ctx</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">gen</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">gen</span><span class="p">.</span><span class="nx">next</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">function</span><span class="dl">'</span><span class="p">)</span> <span class="k">return</span> <span class="nf">resolve</span><span class="p">(</span><span class="nx">gen</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div> <p>接着，co 将 Generator 函数的内部指针对象的 <code class="language-plaintext highlighter-rouge">next</code> 方法，包装成 <code class="language-plaintext highlighter-rouge">onFulfilled</code> 函数。这主要是为了能够捕捉抛出的错误。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">co</span><span class="p">(</span><span class="nx">gen</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">gen</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">function</span><span class="dl">'</span><span class="p">)</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nx">ctx</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">gen</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">gen</span><span class="p">.</span><span class="nx">next</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">function</span><span class="dl">'</span><span class="p">)</span> <span class="k">return</span> <span class="nf">resolve</span><span class="p">(</span><span class="nx">gen</span><span class="p">);</span>

    <span class="nf">onFulfilled</span><span class="p">();</span>
    <span class="kd">function</span> <span class="nf">onFulfilled</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">ret</span><span class="p">;</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="nx">ret</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">.</span><span class="nf">next</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nf">reject</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="nf">next</span><span class="p">(</span><span class="nx">ret</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div> <p>最后，就是关键的 <code class="language-plaintext highlighter-rouge">next</code> 函数，它会反复调用自身。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">next</span><span class="p">(</span><span class="nx">ret</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span> <span class="k">return</span> <span class="nf">resolve</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">toPromise</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">ret</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">value</span> <span class="o">&amp;&amp;</span> <span class="nf">isPromise</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span> <span class="k">return</span> <span class="nx">value</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">);</span>
  <span class="k">return</span> <span class="nf">onRejected</span><span class="p">(</span>
    <span class="k">new</span> <span class="nc">TypeError</span><span class="p">(</span>
      <span class="dl">'</span><span class="s1">You may only yield a function, promise, generator, array, or object, </span><span class="dl">'</span>
      <span class="o">+</span> <span class="dl">'</span><span class="s1">but the following object was passed: "</span><span class="dl">'</span>
      <span class="o">+</span> <span class="nc">String</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>
      <span class="o">+</span> <span class="dl">'</span><span class="s1">"</span><span class="dl">'</span>
    <span class="p">)</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面代码中，<code class="language-plaintext highlighter-rouge">next</code> 函数的内部代码，一共只有四行命令。</p> <ul> <li>第一行，检查当前是否为 Generator 函数的最后一步，如果是就返回。</li> <li>第二行，确保每一步的返回值，是 Promise 对象。</li> <li>第三行，使用 <code class="language-plaintext highlighter-rouge">then</code> 方法，为返回值加上回调函数，然后通过 <code class="language-plaintext highlighter-rouge">onFulfilled</code> 函数再次调用 <code class="language-plaintext highlighter-rouge">next</code> 函数。</li> <li>第四行，在参数不符合要求的情况下（参数非 Thunk 函数和 Promise 对象），将 Promise 对象的状态改为 <code class="language-plaintext highlighter-rouge">rejected</code>，从而终止执行。</li> </ul> <h4 id="5处理并发的异步操作">（5）处理并发的异步操作</h4> <p>co 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。</p> <p>这时，要把并发的操作都放在数组或对象里面，跟在 <code class="language-plaintext highlighter-rouge">yield</code> 语句后面。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 数组的写法</span>
<span class="nf">co</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">yield</span> <span class="p">[</span>
    <span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>
    <span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
  <span class="p">];</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">onerror</span><span class="p">);</span>

<span class="c1">// 对象的写法</span>
<span class="nf">co</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">yield</span> <span class="p">{</span>
    <span class="mi">1</span><span class="p">:</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>
    <span class="mi">2</span><span class="p">:</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>
  <span class="p">};</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">onerror</span><span class="p">);</span>
</code></pre></div></div> <p>下面是另一个例子。</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">co</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">[</span><span class="nx">n1</span><span class="p">,</span> <span class="nx">n2</span><span class="p">,</span> <span class="nx">n3</span><span class="p">];</span>
  <span class="k">yield</span> <span class="nx">values</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">somethingAsync</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">function</span><span class="o">*</span> <span class="nf">somethingAsync</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// do something async</span>
  <span class="k">return</span> <span class="nx">y</span>
<span class="p">}</span>
</code></pre></div></div> <p>上面的代码允许并发三个 <code class="language-plaintext highlighter-rouge">somethingAsync</code> 异步操作，等到它们全部完成，才会进行下一步。</p> <h2 id="十三参考">十三、参考</h2> <ul> <li>阮一峰，<a href="https://es6.ruanyifeng.com/#docs/generator">Generator 函数的语法</a></li> <li>阮一峰，<a href="https://es6.ruanyifeng.com/#docs/generator-async">Generator 函数的异步应用</a></li> </ul>]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[一、简介]]></summary></entry><entry><title type="html">ES6 - Iterator</title><link href="https://feng-zhang0712.github.io//blog/2024/iterator/" rel="alternate" type="text/html" title="ES6 - Iterator"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/iterator</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/iterator/"><![CDATA[<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">ES6 - let 和 const 命令</title><link href="https://feng-zhang0712.github.io//blog/2024/let-const/" rel="alternate" type="text/html" title="ES6 - let 和 const 命令"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://feng-zhang0712.github.io//blog/2024/let-const</id><content type="html" xml:base="https://feng-zhang0712.github.io//blog/2024/let-const/"><![CDATA[]]></content><author><name></name></author><category term="frontend"/><category term="React"/><category term="es6"/><summary type="html"><![CDATA[]]></summary></entry></feed>